--------------------------------------------------------
--  File created - Friday-January-19-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence S_COURSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "S_COURSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 122 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ABOUTUS
--------------------------------------------------------

  CREATE TABLE "ABOUTUS" 
   (	"ABOUTUSID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ABOUTUSTEXT" CLOB, 
	"LASTUPDATED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ANSWER
--------------------------------------------------------

  CREATE TABLE "ANSWER" 
   (	"ANSWERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"QUESTIONID" NUMBER, 
	"ANSWERTEXT" VARCHAR2(1000), 
	"ISCORRECT" VARCHAR2(5)
   ) ;
--------------------------------------------------------
--  DDL for Table ASSESSMENTS
--------------------------------------------------------

  CREATE TABLE "ASSESSMENTS" 
   (	"ASSESSMENTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(1000), 
	"ASSESSMENTTYPE" VARCHAR2(50), 
	"STARTDATE" DATE, 
	"ENDDATE" DATE, 
	"STARTTIME" TIMESTAMP (6), 
	"ENDTIME" TIMESTAMP (6), 
	"ASSESSMENTSCORE" NUMBER, 
	"ATTACHFILE" VARCHAR2(1000), 
	"SECTIONID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table ATTENDANCE
--------------------------------------------------------

  CREATE TABLE "ATTENDANCE" 
   (	"ATTENDANCEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SECTIONID" NUMBER, 
	"DATEOFATTENDANCE" DATE, 
	"USERID" NUMBER, 
	"STATUS" VARCHAR2(10)
   ) ;
--------------------------------------------------------
--  DDL for Table BATCHES
--------------------------------------------------------

  CREATE TABLE "BATCHES" 
   (	"BATCHESID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PROGRAMID" NUMBER, 
	"NUMBEROFBATCHES" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table CERTIFICATES
--------------------------------------------------------

  CREATE TABLE "CERTIFICATES" 
   (	"CERTIFICATEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERID" NUMBER, 
	"COURSEID" NUMBER, 
	"RELEASEDATE" DATE, 
	"EXPIREDATE" DATE, 
	"CERTIFICATECLOUDINARYURL" VARCHAR2(400)
   ) ;
--------------------------------------------------------
--  DDL for Table CONTACT
--------------------------------------------------------

  CREATE TABLE "CONTACT" 
   (	"CONTACTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(50), 
	"EMAIL" VARCHAR2(50), 
	"PHONENUMBER" NUMBER(10,0), 
	"MESSAGE" VARCHAR2(255), 
	"CONTACTDATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table COURSE
--------------------------------------------------------

  CREATE TABLE "COURSE" 
   (	"COURSEID" NUMBER DEFAULT "S_COURSE_SEQ"."NEXTVAL", 
	"COURSENAME" VARCHAR2(150), 
	"PROGRAMID" NUMBER, 
	"STARTDATE" DATE, 
	"ENDDATE" DATE, 
	"IMAGEPATH" VARCHAR2(400), 
	"NUMBEROFSECTIONS" NUMBER, 
	"PREREQUISITE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table CVS
--------------------------------------------------------

  CREATE TABLE "CVS" 
   (	"CVID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"GITHUBLINK" VARCHAR2(255), 
	"EXPERIENCE" VARCHAR2(1000), 
	"GPA" NUMBER(6,2), 
	"RATING" VARCHAR2(50), 
	"CERTIFICATES" VARCHAR2(500), 
	"EDUCATION" VARCHAR2(800), 
	"MAJOR" VARCHAR2(500), 
	"PROJECTS" VARCHAR2(2000), 
	"INTERESTS" VARCHAR2(800), 
	"LINKEDINTLINK" VARCHAR2(500), 
	"SKILLS" CLOB, 
	"LANGUAGES" CLOB, 
	"USERID" NUMBER, 
	"QRCODEURL" VARCHAR2(600)
   ) ;
--------------------------------------------------------
--  DDL for Table FEEDBACK
--------------------------------------------------------

  CREATE TABLE "FEEDBACK" 
   (	"FEEDBACKID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FEEDBACKCONTENT" VARCHAR2(255), 
	"RATING" NUMBER, 
	"FEEDBACKDATE" DATE, 
	"SECTIONID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table GRADES
--------------------------------------------------------

  CREATE TABLE "GRADES" 
   (	"GRADEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STUDENTGRADE" NUMBER, 
	"USERID" NUMBER, 
	"ASSESSMANTID" NUMBER, 
	"NOTES" VARCHAR2(500)
   ) ;
--------------------------------------------------------
--  DDL for Table LOGIN
--------------------------------------------------------

  CREATE TABLE "LOGIN" 
   (	"LOGINID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERNAME" VARCHAR2(50), 
	"PASSWORD" VARCHAR2(50), 
	"ROLEID" NUMBER, 
	"USERID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table MATERIAL
--------------------------------------------------------

  CREATE TABLE "MATERIAL" 
   (	"MATERIALID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MATERIALNAME" VARCHAR2(100), 
	"MATERIALPATH" VARCHAR2(255), 
	"COURSEID" NUMBER, 
	"VIDEOURL" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table MESSAGES
--------------------------------------------------------

  CREATE TABLE "MESSAGES" 
   (	"MESSAGEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SENDERID" NUMBER, 
	"RECEIVERID" NUMBER, 
	"MESSAGETEXT" CLOB, 
	"FILENAME" VARCHAR2(255), 
	"SENDDATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table NOTIFICATIONS
--------------------------------------------------------

  CREATE TABLE "NOTIFICATIONS" 
   (	"NOTIFICATIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SECTIONID" NUMBER, 
	"NOTIFICATIONTEXT" CLOB, 
	"NOTIFICATIONENDDATE" DATE, 
	"NOTIFICATIONSTARTDATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table POLLOPTIONS
--------------------------------------------------------

  CREATE TABLE "POLLOPTIONS" 
   (	"OPTIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"POLLID" NUMBER, 
	"OPTIONTEXT" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table POLLRESPONSES
--------------------------------------------------------

  CREATE TABLE "POLLRESPONSES" 
   (	"POLLRESPONSEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"POLLID" NUMBER, 
	"USERID" NUMBER, 
	"OPTIONID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table POLLS
--------------------------------------------------------

  CREATE TABLE "POLLS" 
   (	"POLLID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(1000), 
	"STARTDATE" DATE, 
	"ENDDATE" DATE, 
	"SECTIONID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table PROGRAM
--------------------------------------------------------

  CREATE TABLE "PROGRAM" 
   (	"PROGRAMID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TRACKNAME" VARCHAR2(200), 
	"IMAGEPATH" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(255), 
	"PROGRAMPERIOD" VARCHAR2(100)
   ) ;
--------------------------------------------------------
--  DDL for Table QUESTIONS
--------------------------------------------------------

  CREATE TABLE "QUESTIONS" 
   (	"QUESTIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"QUESTIONTEXT" VARCHAR2(1000), 
	"MARKS" NUMBER, 
	"ASSESSMENTID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table REVIEWINSTRUCTOR
--------------------------------------------------------

  CREATE TABLE "REVIEWINSTRUCTOR" 
   (	"REVIEWID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"REVIEWCONTENT" VARCHAR2(255), 
	"RATING" NUMBER, 
	"REVIEWDATE" DATE, 
	"SECTIONID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table ROLE
--------------------------------------------------------

  CREATE TABLE "ROLE" 
   (	"ROLEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLENAME" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table SECTION
--------------------------------------------------------

  CREATE TABLE "SECTION" 
   (	"SECTIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SECTIONNAME" VARCHAR2(150), 
	"TIMELECTURE" VARCHAR2(100), 
	"MEETINGLINK" VARCHAR2(255), 
	"COURSEID" NUMBER, 
	"INSTRUCTORID" NUMBER, 
	"LECTUREDAYS" VARCHAR2(200), 
	"IMAGEPATH" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table SLIDER
--------------------------------------------------------

  CREATE TABLE "SLIDER" 
   (	"SLIDERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"IMAGEPATH" VARCHAR2(100)
   ) ;
--------------------------------------------------------
--  DDL for Table STDSECTION
--------------------------------------------------------

  CREATE TABLE "STDSECTION" 
   (	"STDSECTIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SECTIONID" NUMBER, 
	"STUDENTID" NUMBER, 
	"FLAG" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TESTIMONIAL
--------------------------------------------------------

  CREATE TABLE "TESTIMONIAL" 
   (	"TESTIMONIALID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TESTIMONIALTEXT" VARCHAR2(255), 
	"TESTIMONIALDATE" DATE, 
	"TESTIMONIALSTATUS" NUMBER(1,0) DEFAULT 0, 
	"USERID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "USERS" 
   (	"USERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(50), 
	"LASTNAME" VARCHAR2(50), 
	"DATEOFBIRTH" DATE, 
	"IMAGEPATH" VARCHAR2(300), 
	"ADDRESS" VARCHAR2(100), 
	"PHONENUMBER" VARCHAR2(15), 
	"REGISTRATIONDATE" DATE, 
	"ISACTIVE" NUMBER(1,0)
   ) ;
--------------------------------------------------------
--  DDL for Table USERSOLUTION
--------------------------------------------------------

  CREATE TABLE "USERSOLUTION" 
   (	"SOLUTIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERID" NUMBER, 
	"ASSESSMENTID" NUMBER, 
	"USERSOLUTIONTEXT" VARCHAR2(2000), 
	"ATTEMPTDATE" DATE, 
	"QUESTIONID" NUMBER, 
	"ANSWERID" NUMBER
   ) ;
REM INSERTING into ABOUTUS
SET DEFINE OFF;
REM INSERTING into ANSWER
SET DEFINE OFF;
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (41,41,'Evaluate advanced C# skills','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (46,42,'Basic Arithmetic','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (42,41,'Assess knowledge of basic programming concepts','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (43,41,'Focus on theoretical concepts only','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (44,41,'Test graphic design proficiency','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (45,42,'Advanced Machine Learning','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (47,42,'Variables and Data Types','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (48,42,'Networking Protocols','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (49,43,'Outstanding Object Programming','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (50,43,'Object-Oriented Programming','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (51,43,'Overwhelming Operations Protocol','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (52,43,'Object-Oriented Protocols','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (53,44,'Data Warehouses','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (54,44,'Variables','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (55,44,'Arrays','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (56,44,'Constants','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (57,45,'Loop','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (58,45,'Switch','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (59,45,'Function','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (60,45,'Array','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (61,46,'Define a new data type','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (62,46,'Execute a loop','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (63,46,'Create an array','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (64,46,'Declare a constant','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (65,47,'int','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (66,47,'float','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (67,47,'string','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (68,47,'vector','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (69,48,'Integrated Development Environment','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (70,48,'Intelligent Design Elements','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (71,48,'Interactive Data Execution','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (72,48,'Internal Data Exchange','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (73,49,'==','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (74,49,'++','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (75,49,'--','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (76,49,'=','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (77,50,'Acquiring new resources','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (78,50,'Reusing code and creating a hierarchy of','1');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (79,50,'External file inclusion','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (80,50,'Incrementing variable values','0');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (129,64,'Overwhelming Operations Protocol','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (3,1,null,null);
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (142,82,'Outstanding Object Programming','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (143,82,'Overwhelming Operations Protocol','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (141,81,'used to declare a class','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (21,21,'Application Programming Interface','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (22,21,'Advanced Programming Interface','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (23,21,'Application Protocol Interface','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (24,21,'All of the above','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (25,22,'GET, POST, PUT, DELETE','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (26,22,'READ, WRITE, UPDATE, REMOVE','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (27,22,'FETCH, INSERT, MODIFY, ERASE','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (28,22,'GET, SEND, UPDATE, DELETE','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (81,51,'Application Programming Interface','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (82,51,'Advanced Programming Interface','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (83,52,'GET, POST, PUT, DELETE','true');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (84,52,'READ, WRITE, UPDATE, REMOVE','false');
Insert into ANSWER (ANSWERID,QUESTIONID,ANSWERTEXT,ISCORRECT) values (118,64,'Object-Oriented Programming','true');
REM INSERTING into ASSESSMENTS
SET DEFINE OFF;
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (41,'Assignment 2','A C# programming assignment typically involves tasks related to basic syntax, control flow (if statements, loops), methods, arrays, collections, and basic exception handling with try-catch blocks. Check assignment guidelines for specifics.','Assignment',to_date('10-JAN-24','DD-MON-RR'),to_date('14-JAN-24','DD-MON-RR'),to_timestamp('10-JAN-24 10.00.00.518343000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('14-JAN-24 10.00.00.518343000 AM','DD-MON-RR HH.MI.SSXFF AM'),60,'http://www.cesarkallas.net/arquivos/livros/informatica/csharp/Programming_C%23.pdf',1);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (1,'First Quiz','The first C# quiz covers basics: variables, data types, and introductory object-oriented programming. It tests fundamental skills to pave the way for more advanced topics.','Exam',to_date('10-JAN-24','DD-MON-RR'),to_date('10-JAN-24','DD-MON-RR'),to_timestamp('09-JAN-24 07.48.00.090444000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('09-JAN-24 07.52.00.032675000 PM','DD-MON-RR HH.MI.SSXFF AM'),4,null,1);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (101,'First Exam','A first-level C# programming exam typically covers basic syntax, control flow (if statements, loops), methods, arrays, and basic exception handling with try-catch blocks. Refer to the exam guidelines for details.','Exam',to_date('11-JAN-24','DD-MON-RR'),to_date('11-JAN-24','DD-MON-RR'),to_timestamp('10-JAN-24 10.00.00.002482000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('10-JAN-24 12.00.00.433662000 PM','DD-MON-RR HH.MI.SSXFF AM'),20,null,1);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (81,'Assignment 1','A C# programming assignment typically involves tasks related to basic syntax, control flow (if statements, loops), methods, arrays, collections, and basic exception handling with try-catch blocks. Check assignment guidelines for specifics.','Assignment',to_date('08-JAN-24','DD-MON-RR'),to_date('18-JAN-24','DD-MON-RR'),to_timestamp('08-JAN-24 05.12.44.275277000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('08-JAN-24 08.12.47.753866000 PM','DD-MON-RR HH.MI.SSXFF AM'),10,'http://www.cesarkallas.net/arquivos/livros/informatica/csharp/Programming_C%23.pdf',1);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (146,'Assignment #1','C# OOP Assignment #1','Assignment',to_date('13-JAN-24','DD-MON-RR'),to_date('20-JAN-24','DD-MON-RR'),to_timestamp('13-JAN-24 09.07.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JAN-24 09.07.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),10,'Assignment_Assignment1.pdf',2);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (149,'First Exam','C# OOP First Exam','Exam',to_date('15-JAN-24','DD-MON-RR'),to_date('15-JAN-24','DD-MON-RR'),to_timestamp('15-JAN-24 09.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('15-JAN-24 06.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),25,null,2);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (103,'Second Quiz','The second C# quiz covers basics: variables, data types, and introductory object-oriented programming. It tests fundamental skills to pave the way for more advanced topics.','Exam',to_date('12-JAN-24','DD-MON-RR'),to_date('12-JAN-24','DD-MON-RR'),to_timestamp('12-JAN-24 12.00.00.344140000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('12-JAN-24 01.00.00.714105000 PM','DD-MON-RR HH.MI.SSXFF AM'),4,null,1);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (156,'Assign1','asi','Assignment',to_date('18-JAN-24','DD-MON-RR'),to_date('19-JAN-24','DD-MON-RR'),to_timestamp('18-JAN-24 02.42.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JAN-24 02.42.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),60,'Assignment.pdf',2);
Insert into ASSESSMENTS (ASSESSMENTID,TITLE,DESCRIPTION,ASSESSMENTTYPE,STARTDATE,ENDDATE,STARTTIME,ENDTIME,ASSESSMENTSCORE,ATTACHFILE,SECTIONID) values (157,'Second ','sec','Exam',to_date('18-JAN-24','DD-MON-RR'),to_date('19-JAN-24','DD-MON-RR'),to_timestamp('18-JAN-24 02.44.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JAN-24 02.44.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),60,null,2);
REM INSERTING into ATTENDANCE
SET DEFINE OFF;
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (21,2,to_date('10-DEC-23','DD-MON-RR'),43,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (65,3,to_date('18-JAN-24','DD-MON-RR'),null,'Absent');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (23,2,to_date('12-DEC-23','DD-MON-RR'),43,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (24,2,to_date('26-DEC-23','DD-MON-RR'),1,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (1,1,to_date('31-DEC-23','DD-MON-RR'),43,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (41,1,to_date('16-JAN-24','DD-MON-RR'),2,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (42,1,to_date('16-JAN-24','DD-MON-RR'),44,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (43,2,to_date('15-JAN-24','DD-MON-RR'),44,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (63,2,to_date('18-JAN-24','DD-MON-RR'),null,'Absent');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (64,2,to_date('18-JAN-24','DD-MON-RR'),null,'Absent');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (61,2,to_date('18-JAN-24','DD-MON-RR'),null,'Absent');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (62,2,to_date('18-JAN-24','DD-MON-RR'),null,'Present');
Insert into ATTENDANCE (ATTENDANCEID,SECTIONID,DATEOFATTENDANCE,USERID,STATUS) values (2,1,to_date('28-DEC-23','DD-MON-RR'),43,'Present');
REM INSERTING into BATCHES
SET DEFINE OFF;
REM INSERTING into CERTIFICATES
SET DEFINE OFF;
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (41,1,1,to_date('08-JAN-24','DD-MON-RR'),to_date('08-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1704753816/certificate_1_20240109014337.pdf');
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (63,2,1,to_date('11-JAN-24','DD-MON-RR'),to_date('11-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1704926302/certificate_2_20240111013822.pdf');
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (84,44,1,to_date('18-JAN-24','DD-MON-RR'),to_date('18-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1705568020/certificate_44_20240118115339.pdf');
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (94,43,2,to_date('18-JAN-24','DD-MON-RR'),to_date('18-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1705584738/certificate_43_20240118163217.pdf');
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (83,44,2,to_date('18-JAN-24','DD-MON-RR'),to_date('18-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1705568000/certificate_44_20240118115319.pdf');
Insert into CERTIFICATES (CERTIFICATEID,USERID,COURSEID,RELEASEDATE,EXPIREDATE,CERTIFICATECLOUDINARYURL) values (95,43,1,to_date('18-JAN-24','DD-MON-RR'),to_date('18-JAN-25','DD-MON-RR'),'https://res.cloudinary.com/dsmowyioy/image/upload/v1705584758/certificate_43_20240118163237.pdf');
REM INSERTING into CONTACT
SET DEFINE OFF;
REM INSERTING into COURSE
SET DEFINE OFF;
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (1,'C#',1,to_date('01-OCT-23','DD-MON-RR'),to_date('01-JAN-24','DD-MON-RR'),'C_Sharp_Logo_2023.svg.png',1,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (104,'Math 2',21,to_date('17-JAN-24','DD-MON-RR'),to_date('31-JAN-24','DD-MON-RR'),'CertifyHub1.png',1,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (2,'C# OOP',1,to_date('01-JAN-24','DD-MON-RR'),to_date('16-JAN-24','DD-MON-RR'),'oop-logo.png',1,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (3,'DataBase',1,null,null,'db.png',null,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (4,'Web Page Design',1,to_date('09-JAN-24','DD-MON-RR'),to_date('16-JAN-24','DD-MON-RR'),'we.png',null,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (62,'Python',21,null,null,'650e3fa5-94ec-4e52-8574-c3af0d0d999c_CertifyHub1.png',null,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (63,'Math',21,null,null,'a54083dd-7937-4fb4-b801-845f9f4a4cc1_CertifyHub1.png',null,null);
Insert into COURSE (COURSEID,COURSENAME,PROGRAMID,STARTDATE,ENDDATE,IMAGEPATH,NUMBEROFSECTIONS,PREREQUISITE) values (64,'Data Science',21,null,null,'5a3a068b-6df9-4f65-a74c-454357522fd7_CertifyHub1.png',null,null);
REM INSERTING into CVS
SET DEFINE OFF;
Insert into CVS (CVID,GITHUBLINK,EXPERIENCE,GPA,RATING,CERTIFICATES,EDUCATION,MAJOR,PROJECTS,INTERESTS,LINKEDINTLINK,USERID,QRCODEURL) values (101,null,'The Learning Hub Training',3.6,null,null,'CPE JUST University','Full-Stack Developer','LMS System, She & He ','I am a highly motivated and results-driven individual with a Master of Science in Computer Science from JUST University. As a seasoned IT trainer specializing in full-stack development, I bring a wealth of knowledge and hands-on experience to the table. My journey in the technology realm has equipped me with a deep understanding of the latest programming languages, frameworks, and best practices, allowing me to proficiently guide individuals through the intricacies of full-stack development.','jjvvv',44,'/qrimages/qr-95042bd6-6c15-4288-8d3f-5b192dfd41ba.png');
Insert into CVS (CVID,GITHUBLINK,EXPERIENCE,GPA,RATING,CERTIFICATES,EDUCATION,MAJOR,PROJECTS,INTERESTS,LINKEDINTLINK,USERID,QRCODEURL) values (43,'linkkkk','The Learning Hub Training',3.8,null,null,'CPE JUST University','Web Developer','LMS System, She & He ','I am a highly motivated and results-driven professional with a passion for [your field or industry]. With [number] years of experience in [specific skills or expertise], I have consistently demonstrated a commitment to excellence and a keen ability to [mention specific achievements or accomplishments]. My strong analytical skills, coupled with effective communication and teamwork, have enabled me to successfully [highlight a major achievement or project]. I am dedicated to continuous learning and staying abreast of industry trends to ensure I bring innovative solutions to the table. I am confident that my skills and dedication make me a valuable asset, and I am excited about the opportunity to contribute to The Learning Hub and its success.','test',43,'/qrimages/qr-ac66104a-cb07-413c-aecd-2530212a51f2.png');
Insert into CVS (CVID,GITHUBLINK,EXPERIENCE,GPA,RATING,CERTIFICATES,EDUCATION,MAJOR,PROJECTS,INTERESTS,LINKEDINTLINK,USERID,QRCODEURL) values (32,'https://drive.google.com/drive/u/1/my-drive','EX',4,null,null,'CPE JUST','MAJ','PROJ','INT','https://drive.google.com/drive/u/1/my-drive',null,'/qrimages/qr-f0ba3b5d-f8b8-46e1-b274-dd02941d1558.png');
Insert into CVS (CVID,GITHUBLINK,EXPERIENCE,GPA,RATING,CERTIFICATES,EDUCATION,MAJOR,PROJECTS,INTERESTS,LINKEDINTLINK,USERID,QRCODEURL) values (81,'XCC','IT Trainer | XYZ Tech Institute',3.93,null,null,'Master of Science in Computer Science JUST University','IT Trainer','CertifyHub LMS System, She & He Online Store','I am a highly motivated and results-driven individual with a Master of Science in Computer Science from JUST University. As a seasoned IT trainer specializing in full-stack development, I bring a wealth of knowledge and hands-on experience to the table. My journey in the technology realm has equipped me with a deep understanding of the latest programming languages, frameworks, and best practices, allowing me to proficiently guide individuals through the intricacies of full-stack development.','linkedin',62,null);
Insert into CVS (CVID,GITHUBLINK,EXPERIENCE,GPA,RATING,CERTIFICATES,EDUCATION,MAJOR,PROJECTS,INTERESTS,LINKEDINTLINK,USERID,QRCODEURL) values (44,'gitHub','UI/UX',3.7,null,null,'CIS','Trainee','LMS','Self Design','LinkedIn',2,'/qrimages/qr-122f170c-b944-4bc9-8c01-62b3e79f3e7d.png');
REM INSERTING into FEEDBACK
SET DEFINE OFF;
Insert into FEEDBACK (FEEDBACKID,FEEDBACKCONTENT,RATING,FEEDBACKDATE,SECTIONID) values (2,'Good',4,to_date('01-DEC-23','DD-MON-RR'),1);
Insert into FEEDBACK (FEEDBACKID,FEEDBACKCONTENT,RATING,FEEDBACKDATE,SECTIONID) values (3,null,null,null,1);
REM INSERTING into GRADES
SET DEFINE OFF;
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (84,4,43,1,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (148,0,44,146,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (87,8,43,101,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (82,8,43,81,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (22,28,2,1,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (154,60,43,41,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (153,2,43,157,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (149,9,43,146,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (152,null,43,103,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (142,2,43,149,null);
Insert into GRADES (GRADEID,STUDENTGRADE,USERID,ASSESSMANTID,NOTES) values (155,60,43,156,null);
REM INSERTING into LOGIN
SET DEFINE OFF;
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (82,'xx','jqHhUyaw',3,82);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (3,'sarihan18@cit.just.edu.jo','S123666',3,2);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (44,'instructor@gmail.com','wjL21Sgs',2,53);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (1,'sadeenrihan@gmail.com','Testpass',1,1);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (61,'student@gmail.com','kaVj7qHd',3,61);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (81,'shatha.mustafa16@gmail.com','Iv1xVlt3',2,81);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (62,'onlinebookaddress@gmail.com','sk9rojWT',2,62);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (41,'sadeenabed12@gmail.com','r5gdhey',3,43);
Insert into LOGIN (LOGINID,USERNAME,PASSWORD,ROLEID,USERID) values (42,'shatha.ayasrah52@gmail.com','cfee4gb',3,44);
REM INSERTING into MATERIAL
SET DEFINE OFF;
Insert into MATERIAL (MATERIALID,MATERIALNAME,MATERIALPATH,COURSEID,VIDEOURL) values (42,'Chapter 1','Angular Day 1.pdf',2,null);
Insert into MATERIAL (MATERIALID,MATERIALNAME,MATERIALPATH,COURSEID,VIDEOURL) values (1,'Chapter 01',null,1,'ccccccc');
Insert into MATERIAL (MATERIALID,MATERIALNAME,MATERIALPATH,COURSEID,VIDEOURL) values (21,'Chapter 02',null,1,'ccc');
REM INSERTING into MESSAGES
SET DEFINE OFF;
REM INSERTING into NOTIFICATIONS
SET DEFINE OFF;
Insert into NOTIFICATIONS (NOTIFICATIONID,SECTIONID,NOTIFICATIONENDDATE,NOTIFICATIONSTARTDATE) values (41,2,to_date('25-JAN-24','DD-MON-RR'),to_date('18-JAN-24','DD-MON-RR'));
Insert into NOTIFICATIONS (NOTIFICATIONID,SECTIONID,NOTIFICATIONENDDATE,NOTIFICATIONSTARTDATE) values (38,1,to_date('20-JAN-24','DD-MON-RR'),to_date('13-JAN-24','DD-MON-RR'));
REM INSERTING into POLLOPTIONS
SET DEFINE OFF;
REM INSERTING into POLLRESPONSES
SET DEFINE OFF;
REM INSERTING into POLLS
SET DEFINE OFF;
Insert into POLLS (POLLID,TITLE,DESCRIPTION,STARTDATE,ENDDATE,SECTIONID) values (2,'Exam2','Exam time',to_date('11-DEC-23','DD-MON-RR'),to_date('11-DEC-23','DD-MON-RR'),1);
REM INSERTING into PROGRAM
SET DEFINE OFF;
Insert into PROGRAM (PROGRAMID,TRACKNAME,IMAGEPATH,DESCRIPTION,PROGRAMPERIOD) values (21,'Ai & ML','ai.jpg','Our AI & ML program provides a comprehensive grasp of cutting-edge technologies, blending theory with practical skills. Prepare for innovation-focused careers at the tech forefront.','8 Months');
Insert into PROGRAM (PROGRAMID,TRACKNAME,IMAGEPATH,DESCRIPTION,PROGRAMPERIOD) values (22,'Mobile Development','2c0bd094-5302-4fd5-a17f-860742a86069_md.jpg','Master mobile development essentials swiftly. From app creation to platform insights, this course offers hands-on skills for success. Ideal for beginners and skill enhancement. Enroll now and dive into Mobile Development.','6 Months');
Insert into PROGRAM (PROGRAMID,TRACKNAME,IMAGEPATH,DESCRIPTION,PROGRAMPERIOD) values (23,'Quality Assurance','QA.jpg','Gain expertise in Quality Assurance (QA) swiftly. Our program covers fundamental concepts and hands-on testing for a successful career. Perfect for beginners and skill enhancement. Enroll now for QA proficiency.','7 Months');
Insert into PROGRAM (PROGRAMID,TRACKNAME,IMAGEPATH,DESCRIPTION,PROGRAMPERIOD) values (1,'Full-Stack Web Development','4d430455-5557-40ee-907a-808e7386df4f_fullstack.jpg','A Full Stack Web Development program trains students in both front-end and back-end technologies, enabling them to build complete web applications, from user interface design to server and database handling.','6 Months');
Insert into PROGRAM (PROGRAMID,TRACKNAME,IMAGEPATH,DESCRIPTION,PROGRAMPERIOD) values (70,'Ai','9f231857-ffcc-4a9b-a97d-db313bdf8a14_CertifyHub.png','Ai','6');
REM INSERTING into QUESTIONS
SET DEFINE OFF;
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (81,'What is the purpose of the ''class'' keyword in C#?',3,149);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (47,'Which of the following is NOT a valid data type in C#?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (41,'What is the purpose of the C# introductory exam?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (42,'Which of the following is a fundamental concept in C# programming?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (43,'What does OOP stand for in C# programming?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (44,'In C#, what is used to store data temporarily during program execution?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (45,'Which control structure is used to make decisions in C# programs?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (46,'What is the purpose of the ''class'' keyword in C#?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (48,'What does the acronym IDE stand for in the context of C# development?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (49,'Which operator is used for comparing two values for equality in C#?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (50,'What does the term ''inheritance'' refer to in C# programming?',2,101);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (1,'xx',null,41);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (64,'OOP Stands for?',2,149);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (82,'What is the purpose of the ''class'' keyword in C#?',2,157);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (21,'What does API stand for in Web API?',2,1);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (22,'Which HTTP methods are commonly used in RESTful Web API?',2,1);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (51,'What does API stand for in Web API?',2,103);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (52,'Which HTTP methods are commonly used in RESTful Web API?',2,103);
Insert into QUESTIONS (QUESTIONID,QUESTIONTEXT,MARKS,ASSESSMENTID) values (61,'What is the purpose of the ''class'' keyword in C#?',2,103);
REM INSERTING into REVIEWINSTRUCTOR
SET DEFINE OFF;
Insert into REVIEWINSTRUCTOR (REVIEWID,REVIEWCONTENT,RATING,REVIEWDATE,SECTIONID) values (2,'review',4,to_date('11-DEC-23','DD-MON-RR'),1);
REM INSERTING into ROLE
SET DEFINE OFF;
Insert into ROLE (ROLEID,ROLENAME) values (1,'ADMIN');
Insert into ROLE (ROLEID,ROLENAME) values (2,'INSTRUCTOR');
Insert into ROLE (ROLEID,ROLENAME) values (3,'LEARNER');
REM INSERTING into SECTION
SET DEFINE OFF;
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (1,'Section 1','8:00AM-9:30AM','https://teams.microsoft.com/l/meetup-join/19%3ameeting_OWZlZjcxNzQtMDUxMC00MDA3LWE3MDctYTZkODI2ZTE0ZDY3%40thread.v2/0?context=%7b%22Tid%22%3a%2213e5772d-fae9-4291-8e92-3ee771b9ec38%22%2c%22Oid%22%3a%22ba4f0102-bd5a-4f47-8c83-0c2ff5e4310b%22%7d',1,62,'Mon - Wed',null);
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (104,'Section1','8:00AM-9:30AM','zzzzz',2,53,'Sun - Tue - Thu',null);
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (2,'Section 2','10:00AM-11:30AM','https://teams.microsoft.com/l/meetup-join/19%3ameeting_OWZlZjcxNzQtMDUxMC00MDA3LWE3MDctYTZkODI2ZTE0ZDY3%40thread.v2/0?context=%7b%22Tid%22%3a%2213e5772d-fae9-4291-8e92-3ee771b9ec38%22%2c%22Oid%22%3a%22ba4f0102-bd5a-4f47-8c83-0c2ff5e4310b%22%7d',2,62,'Mon - Wed',null);
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (3,'Section 1','11:00AM-12:00PM','https://teams.microsoft.com/l/meetup-join/19%3ameeting_OWZlZjcxNzQtMDUxMC00MDA3LWE3MDctYTZkODI2ZTE0ZDY3%40thread.v2/0?context=%7b%22Tid%22%3a%2213e5772d-fae9-4291-8e92-3ee771b9ec38%22%2c%22Oid%22%3a%22ba4f0102-bd5a-4f47-8c83-0c2ff5e4310b%22%7d',3,62,'Sun - Thu',null);
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (4,'Section 1','9:00AM-10:00AM','https://teams.microsoft.com/l/meetup-join/19%3ameeting_OWZlZjcxNzQtMDUxMC00MDA3LWE3MDctYTZkODI2ZTE0ZDY3%40thread.v2/0?context=%7b%22Tid%22%3a%2213e5772d-fae9-4291-8e92-3ee771b9ec38%22%2c%22Oid%22%3a%22ba4f0102-bd5a-4f47-8c83-0c2ff5e4310b%22%7d',4,62,'Sun - Thu',null);
Insert into SECTION (SECTIONID,SECTIONNAME,TIMELECTURE,MEETINGLINK,COURSEID,INSTRUCTORID,LECTUREDAYS,IMAGEPATH) values (101,'Section 2','9:00AM-10:00AM','CDVGGF',1,53,'Mon - Wed',null);
REM INSERTING into SLIDER
SET DEFINE OFF;
REM INSERTING into STDSECTION
SET DEFINE OFF;
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (81,2,43,1);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (83,4,43,0);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (101,2,44,0);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (61,1,43,1);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (62,1,44,1);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (123,2,2,0);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (121,104,2,0);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (3,1,2,0);
Insert into STDSECTION (STDSECTIONID,SECTIONID,STUDENTID,FLAG) values (82,3,43,0);
REM INSERTING into TESTIMONIAL
SET DEFINE OFF;
REM INSERTING into USERS
SET DEFINE OFF;
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (53,'Bayan','AlHassoun',to_date('06-DEC-00','DD-MON-RR'),null,'Annasrah St., Amman, Jordan','+962791588389',to_date('11-JAN-24','DD-MON-RR'),null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (1,'Sadeen','Rihan',to_date('12-JUN-00','DD-MON-RR'),'79fc55ee-2019-4c4d-97d5-5cd682e494e4_sadeen.jpeg','Amman','0791588389',to_date('11-DEC-23','DD-MON-RR'),0);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (62,'Ahmad','Ali',to_date('12-DEC-00','DD-MON-RR'),null,'Amman','0798890321',null,null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (2,'Sara','Rihan',to_date('09-MAY-99','DD-MON-RR'),'sara.jpg','AMMAN','0791306197',to_date('11-DEC-23','DD-MON-RR'),1);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (43,'Eslam','Shqeirat',to_date('01-OCT-00','DD-MON-RR'),'eslam.jpg','Maan','0798787555',to_date('11-JAN-24','DD-MON-RR'),null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (44,'Shatha','Ayasrah',to_date('23-MAY-00','DD-MON-RR'),'shatha.jpg','Jerash','0785535332',to_date('11-JAN-24','DD-MON-RR'),null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (81,'Ola','Mohammed',to_date('05-MAY-96','DD-MON-RR'),null,'Annasrah St., Amman, Jordan','+962791588389',null,null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (61,'Alaa','Ahmad',to_date('12-DEC-00','DD-MON-RR'),null,'Amman, Jordan','079167894',to_date('11-JAN-24','DD-MON-RR'),null);
Insert into USERS (USERID,FIRSTNAME,LASTNAME,DATEOFBIRTH,IMAGEPATH,ADDRESS,PHONENUMBER,REGISTRATIONDATE,ISACTIVE) values (82,'Sadeen','Rihan',to_date('18-JAN-24','DD-MON-RR'),null,'Annasrah St., Amman, Jordan','+962791588389',null,null);
REM INSERTING into USERSOLUTION
SET DEFINE OFF;
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (184,43,81,'Angular Day 7.pdf',to_date('17-JAN-24','DD-MON-RR'),1,3);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (96,1,41,'certificate (3).pdf',to_date('09-JAN-24','DD-MON-RR'),1,3);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (113,43,101,null,to_date('11-JAN-24','DD-MON-RR'),47,65);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (101,43,1,null,to_date('10-JAN-24','DD-MON-RR'),21,21);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (102,43,1,null,to_date('10-JAN-24','DD-MON-RR'),22,25);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (114,43,101,null,to_date('11-JAN-24','DD-MON-RR'),41,41);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (115,43,101,null,to_date('11-JAN-24','DD-MON-RR'),42,46);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (116,43,101,null,to_date('11-JAN-24','DD-MON-RR'),43,49);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (117,43,101,null,to_date('11-JAN-24','DD-MON-RR'),44,53);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (118,43,101,null,to_date('11-JAN-24','DD-MON-RR'),45,58);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (119,43,101,null,to_date('11-JAN-24','DD-MON-RR'),46,61);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (120,43,101,null,to_date('11-JAN-24','DD-MON-RR'),49,73);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (121,43,101,null,to_date('11-JAN-24','DD-MON-RR'),48,69);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (122,43,101,null,to_date('11-JAN-24','DD-MON-RR'),50,77);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (141,2,146,'TEXT',to_date('13-JAN-24','DD-MON-RR'),1,3);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (186,43,157,null,to_date('18-JAN-24','DD-MON-RR'),82,142);
Insert into USERSOLUTION (SOLUTIONID,USERID,ASSESSMENTID,USERSOLUTIONTEXT,ATTEMPTDATE,QUESTIONID,ANSWERID) values (162,43,149,null,to_date('15-JAN-24','DD-MON-RR'),64,118);
--------------------------------------------------------
--  DDL for Procedure GET_STUDENT_GRADE_INFO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "GET_STUDENT_GRADE_INFO" (
    p_user_id IN USERS.USERID%TYPE,
    p_section_id IN Section.SectionID%TYPE
)
IS
    CUR_GRADES SYS_REFCURSOR;
    v_assessment_id Assessments.AssessmentID%TYPE;
    v_grade_count NUMBER;
BEGIN
    -- Assuming you have a specific assessment associated with the section
    SELECT AssessmentID INTO v_assessment_id
    FROM Assessments
    WHERE SectionID = p_section_id;

    OPEN CUR_GRADES FOR
        SELECT
            u.FIRSTNAME AS fname,
            u.LASTNAME AS lname,
            c.CourseName AS course_name,
            g.STUDENTGRADE AS grade,
            COUNT(g.GradeID) AS grade_count
        FROM
            USERS u
        JOIN
            StdSection ss ON u.USERID = ss.StudentId
        JOIN
            Section s ON ss.SectionID = s.SectionID
        JOIN
            Grades g ON u.USERID = g.Userid AND s.SectionID = g.SectionID
        JOIN
            Course c ON s.CourseID = c.CourseID
        WHERE
            u.USERID = p_user_id
            AND s.SectionID = p_section_id
            AND g.AssessmantID = v_assessment_id
        GROUP BY
            u.FIRSTNAME, u.LASTNAME, c.CourseName, g.STUDENTGRADE;

    DBMS_SQL.RETURN_RESULT(CUR_GRADES);
END GET_STUDENT_GRADE_INFO;

/
--------------------------------------------------------
--  DDL for Package ABOUTUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ABOUTUS_PACKAGE" 
AS
PROCEDURE CreateAboutUs (
    p_AboutUsText IN AboutUs.AboutUsText%TYPE,
    p_LastUpdated IN AboutUs.LastUpdated%TYPE
);
PROCEDURE UpdateAboutUs (
    p_AboutUsID IN AboutUs.AboutUsId%TYPE,
    p_AboutUsText IN AboutUs.AboutUsText%TYPE,
    p_LastUpdated IN AboutUs.LastUpdated%TYPE
);

PROCEDURE GetAllAboutus;

END AboutUs_Package ;

/
--------------------------------------------------------
--  DDL for Package ANSWER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ANSWER_PACKAGE" 
AS
    PROCEDURE CREATE_ANSWER (QUESTION_ID IN ANSWER.QUESTIONID%TYPE, ANSWER_TEXT IN ANSWER.ANSWERTEXT%TYPE, IS_CORRECT IN ANSWER.ISCORRECT%TYPE);
    PROCEDURE GET_ANSWER_BY_ID (ANSWER_ID IN ANSWER.ANSWERID%TYPE);
    PROCEDURE UPDATE_ANSWER (ANSWER_ID IN ANSWER.ANSWERID%TYPE, QUESTION_ID IN ANSWER.QUESTIONID%TYPE, ANSWER_TEXT IN ANSWER.ANSWERTEXT%TYPE, IS_CORRECT IN ANSWER.ISCORRECT%TYPE);
    PROCEDURE DELETE_ANSWER (ANSWER_ID IN ANSWER.ANSWERID%TYPE);
    PROCEDURE LIST_ANSWERS_BY_QUESTION (QUESTION_ID IN ANSWER.QUESTIONID%TYPE);
    PROCEDURE LIST_QUESTION_AND_ANSWERS (ASSESSMENT_ID IN QUESTIONS.ASSESSMENTID%TYPE);
END ANSWER_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package ASSESSMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ASSESSMENT_PACKAGE" 
As
PROCEDURE GetAllAssessments;
PROCEDURE GetAssessmentById(id in number);
PROCEDURE CreateAssessment (
    p_Title IN Assessments.Title%TYPE,
    p_Description IN Assessments.Description%TYPE,
    p_AssessmentType IN Assessments.AssessmentType%TYPE,
    p_StartDate IN Assessments.StartDate%TYPE,
    p_EndDate IN Assessments.EndDate%TYPE,
    p_StartTime IN Assessments.StartTime%TYPE,
    p_EndTime IN Assessments.EndTime%TYPE,
    p_AssessmentScore IN Assessments.AssessmentScore%TYPE,
    p_AttachFile IN Assessments.AttachFile%TYPE , 
    p_SectionID IN Assessments.SectionID%TYPE
) ;
PROCEDURE UpdateAssessment(
    p_AssessmentID IN Assessments.AssessmentID%TYPE,
    p_Title IN Assessments.Title%TYPE,
    p_Description IN Assessments.Description%TYPE,
    p_AssessmentType IN Assessments.AssessmentType%TYPE,
    p_StartDate IN Assessments.StartDate%TYPE,
    p_EndDate IN Assessments.EndDate%TYPE,
    p_StartTime IN Assessments.StartTime%TYPE,
    p_EndTime IN Assessments.EndTime%TYPE,
    p_AssessmentScore IN Assessments.AssessmentScore%TYPE,
    p_AttachFile IN Assessments.AttachFile%TYPE , 
    p_SectionID IN Assessments.SectionID%TYPE
) ;

PROCEDURE DeleteAssessment (p_AssessmentID IN Assessments.AssessmentID%TYPE) ;
PROCEDURE  ListAssessmentsByType (p_AssessmentType IN Assessments.AssessmentType%TYPE) ; 
PROCEDURE CountAssessmentsBySection (p_SectionID IN NUMBER,p_Count OUT NUMBER);
PROCEDURE FilterAssessmentsByDate (p_StartDate IN DATE,p_EndDate IN DATE)  ;
PROCEDURE GetUpcomingAssessments ;
PROCEDURE CountAssessmentsByType (p_AssessmentType IN Assessments.AssessmentType%TYPE,p_Count OUT NUMBER);
PROCEDURE GetAssessmentBysectionId(section_id in number);


End Assessment_Package;

/
--------------------------------------------------------
--  DDL for Package ATTENDANCE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ATTENDANCE_PACKAGE" 
AS
PROCEDURE InsertAttendance(section_id IN Attendance.SectionID%type, date_attendance IN Attendance.DateOfAttendance%type, learner_id IN Attendance.USERID%type, attendance_status IN Attendance.Status%type);
PROCEDURE UpdateAttendance(attendance_id IN Attendance.AttendanceID%type, section_id IN Attendance.SectionID%type, date_attendance IN Attendance.DateOfAttendance%type, learner_id IN Attendance.USERID%type, attendance_status IN Attendance.Status%type);
PROCEDURE DeleteAttendance(attendance_id IN Attendance.AttendanceID%type);
PROCEDURE GetAttendanceDetails(attendance_id IN Attendance.AttendanceID%type);
PROCEDURE GetAttendanceBySection(section_id IN Attendance.SectionID%type);
PROCEDURE GetAttendanceByUser(user_id IN Attendance.USERID%type);
PROCEDURE GetAttendanceByDate(date_attendance IN Attendance.DateOfAttendance%type);
PROCEDURE GetAttendanceByStatus(attendance_status IN Attendance.Status%type);
PROCEDURE GetPresentAttendanceCount(present_count OUT NUMBER);
PROCEDURE GetAbsentAttendanceCount(absent_count OUT NUMBER);
PROCEDURE GetPresentAttendanceCountForUser(user_id IN Attendance.USERID%type,  section_id IN Attendance.SectionID%type);
PROCEDURE GetAbsentAttendanceCountForUser(user_id IN Attendance.USERID%type, section_id IN Attendance.SectionID%type);
PROCEDURE GetAttendanceByUserAndSection(user_id IN Attendance.USERID%type,section_id IN Attendance.SectionID%type);
PROCEDURE GetTopStudentsByAttendanceForEachSection(instructor_id IN Users.UserId%TYPE);
END Attendance_Package;

/
--------------------------------------------------------
--  DDL for Package BATCH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "BATCH_PACKAGE" 
as
PROCEDURE CreateBatch(
    p_ProgramID IN NUMBER,
    p_NumberOfBatches IN NUMBER
);

PROCEDURE GetBatchesByProgramID(
    p_ProgramID IN NUMBER
);
PROCEDURE UpdateNumberOfBatches(
    p_BatchID IN NUMBER,
    p_NewNumberOfBatches IN NUMBER
);
PROCEDURE DeleteBatch(
    p_BatchID IN NUMBER
);
procedure GetAllBatches;
end Batch_Package;

/
--------------------------------------------------------
--  DDL for Package CERTIFICATE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CERTIFICATE_PACKAGE" AS
  PROCEDURE SaveCertificate (
    P_USER_ID IN CERTIFICATES.USERID%TYPE,
    P_COURSE_ID IN CERTIFICATES.COURSEID%TYPE,
    P_RELEASE_DATE IN CERTIFICATES.RELEASEDATE%TYPE,
    P_EXPIRE_DATE IN CERTIFICATES.EXPIREDATE%TYPE,
    P_CERTIFICATEURL IN CERTIFICATES.CERTIFICATECLOUDINARYURL%Type
);
PROCEDURE GetUserCertificates (P_USER_ID IN CERTIFICATES.USERID%TYPE);

PROCEDURE UpdateUserCertificate(P_USER_ID IN CERTIFICATES.USERID%TYPE, P_COURSE_ID IN CERTIFICATES.COURSEID%TYPE, P_CERTIFICATEURL IN CERTIFICATES.CERTIFICATECLOUDINARYURL%Type);
END Certificate_Package;

/
--------------------------------------------------------
--  DDL for Package CONTACT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CONTACT_PACKAGE" 
as 
PROCEDURE GetAllContact;
PROCEDURE DeleteContact(Contact_Id IN NUMBER); 
PROCEDURE CreateContact(pName in Contact.Name%type,pEmail in Contact.Email%type,pPhoneNumber in Contact.PhoneNumber%type,
pMessage in Contact.Message%type,pContact_Date in Contact.ContactDate%type DEFAULT SYSDATE);

end Contact_Package;

/
--------------------------------------------------------
--  DDL for Package COURSE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COURSE_PACKAGE" 
As

PROCEDURE GetAllCourses;
PROCEDURE GetNumberOfCourses;
PROCEDURE CreateCourse(Course_Name in Course.CourseName%type,Program_Id in Course.ProgramId%type,Start_Date in Course.StartDate%type ,End_Date in Course.EndDate%type,Image_Path in Course.ImagePath%type,NumberSections in Course.NumberOfSections%type,CPreRequisite in Course.Prerequisite%type);
PROCEDURE UpdateCourse(Course_Id in Course.CourseId%type,Course_Name in Course.CourseName%type,Program_Id in Course.ProgramId%type,Start_Date in Course.StartDate%type ,End_Date in Course.EndDate%type,Image_Path in Course.ImagePath%type,NumberSections in Course.NumberOfSections%type,CPreRequisite in Course.Prerequisite%type);
PROCEDURE DeleteCourse(Course_Id IN NUMBER);
PROCEDURE GetCourseById(Course_Id IN NUMBER);
PROCEDURE GetCourseByProgramId(Program_Id IN NUMBER);
PROCEDURE GetCourseIdByName(Course_Name IN Course.CourseName%TYPE, v_Course_Id OUT Course.CourseId%TYPE);
PROCEDURE UPDATE_COURSE_IMAGE(COURSE_ID IN COURSE.COURSEID%TYPE,NEW_IMG IN COURSE.IMAGEPATH%TYPE);
PROCEDURE GETCOURSECOUNT(COURSE_COUNT OUT NUMBER);
PROCEDURE GetAllCoursesWithSectionsAndInstructors;
PROCEDURE GetCoursesByInstructorId(Instructor_Id IN NUMBER);
PROCEDURE GetInstructorCourseCount(Instructor_Id IN NUMBER, COURSE_COUNT OUT NUMBER);
End Course_Package;

/
--------------------------------------------------------
--  DDL for Package CVS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CVS_PACKAGE" 
AS
PROCEDURE UploadCV(user_id IN CVs.UserID%type ,GH_Link IN CVs.GitHubLink%type,user_experience IN CVs.Experience%type,
                  u_gpa IN CVs.GPA%type, rate IN CVs.Rating%type, u_certificate IN CVs.Certificates%type ,u_Education IN CVs.Education%type,
                  u_major IN CVs.Major%type, u_projects IN CVs.Projects%type, u_interests IN CVs.Interests%type , LI_Link IN CVs.LINKEDINTLINK%type ,u_skills IN CVs.Skills%type , 
                  u_languages IN CVs.Languages%type, QrCode_url IN CVs.QRCodeUrl%type);
PROCEDURE UpdateCV(cv_id IN CVs.CVID%type, user_id IN CVs.UserID%type ,GH_Link IN CVs.GitHubLink%type,user_experience IN CVs.Experience%type,
                  u_gpa IN CVs.GPA%type, rate IN CVs.Rating%type, u_certificate IN CVs.Certificates%type ,u_Education IN CVs.Education%type,
                  u_major IN CVs.Major%type, u_projects IN CVs.Projects%type, u_interests IN CVs.Interests%type , LI_Link IN CVs.LINKEDINTLINK%type ,u_skills IN CVs.Skills%type , 
                  u_languages IN CVs.Languages%type, QrCode_url IN CVs.QRCodeUrl%type);                  
PROCEDURE DeleteCV(cv_id IN CVs.CVID%type);
PROCEDURE GetCVsByUser(user_id IN CVs.UserID%type);
PROCEDURE GetCVDetails(cv_id IN CVs.CVID%type);
PROCEDURE GetCVByQrCode(QrCode_url IN CVs.QRCodeUrl%type);
PROCEDURE GetAllCVs;
PROCEDURE UpdateQrCode(user_id IN CVs.UserID%type, QrCode_url IN CVs.QRCodeUrl%type);
PROCEDURE GetUserInfo(user_id IN CVs.UserID%type);
PROCEDURE GetUserCvInfo(user_id IN CVs.UserID%type);
END CVs_Package;

/
--------------------------------------------------------
--  DDL for Package FEEDBACKPACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "FEEDBACKPACKAGE" AS

    PROCEDURE CreateFeedback(Feedback_Content in Feedback.FeedbackContent%type 
    ,Feedback_Rating in Feedback.Rating%type,
    Feedback_Date in Feedback.FeedbackDate%type DEFAULT SYSDATE
    ,Section_ID in Feedback.SectionID%type);

    PROCEDURE DeleteFeedback(Feedback_Id IN NUMBER);

    PROCEDURE GetAllFeedbacks;


END FeedbackPackage;

/
--------------------------------------------------------
--  DDL for Package GRADES_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "GRADES_PACKAGE" AS

    -- Create a new grade
    PROCEDURE CreateGrade(
        p_grade IN Grades.STUDENTGRADE%TYPE,
        p_userid IN Grades.Userid%TYPE,
        p_assessmentid IN Grades.AssessmantID%TYPE,
        p_notes IN Grades.Notes%TYPE
    );

    -- Read (Get) grade by GradeID
    PROCEDURE GetGradeById(
        p_gradeid IN Grades.GradeID%TYPE
    );
    PROCEDURE GetGradeByUserId(
            User_Id IN Grades.UserId%TYPE
        );

    PROCEDURE GetUserGrade(p_userid IN Grades.UserId%TYPE , p_assessmentid IN Grades.AssessmantID%TYPE);
    -- Update an existing grade
    PROCEDURE UpdateGrade(
        p_grade IN Grades.STUDENTGRADE%TYPE,
        p_userid IN Grades.Userid%TYPE,
        p_assessmentid IN Grades.AssessmantID%TYPE
    );

    -- Delete a grade
    PROCEDURE DeleteGrade(p_gradeid IN Grades.GradeID%TYPE);

    -- Calculate the grade for a user
    PROCEDURE CalculateUserGrade(
        p_userid IN Grades.Userid%TYPE,
        p_final_grade OUT NUMBER
    );

   --  procedure to convert total grade to letter grade
    PROCEDURE ConvertToLetterGrade(
        p_final_grade IN NUMBER,
        p_letter_grade OUT VARCHAR2
    );

END Grades_Package;

/
--------------------------------------------------------
--  DDL for Package LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "LOGIN_PACKAGE" AS
    PROCEDURE GET_ALL_LOGINS;
    PROCEDURE GET_LOGIN_BY_ID (ID IN NUMBER);
    PROCEDURE CREATE_LOGIN(USERNAME IN LOGIN.USERNAME%TYPE,PASSWORD IN LOGIN.PASSWORD%TYPE,ROLEID IN LOGIN.ROLEID%TYPE,USERID IN LOGIN.USERID%TYPE);
    PROCEDURE UPDATE_LOGIN(LOGIN_ID IN LOGIN.LOGINID%TYPE,USER_NAME IN LOGIN.USERNAME%TYPE,PASSWORD_ IN LOGIN.PASSWORD%TYPE,ROLE_ID IN LOGIN.ROLEID%TYPE,USER_ID IN LOGIN.USERID%TYPE);
    PROCEDURE DELETE_LOGIN(LOGIN_ID IN LOGIN.LOGINID%TYPE);
    PROCEDURE USER_LOGIN(USER_NAME IN LOGIN.USERNAME%TYPE, PASSWORD IN LOGIN.PASSWORD%TYPE);
    PROCEDURE UPDATE_PASSWORD(LOGIN_ID IN LOGIN.USERID%TYPE,NEW_PASSWORD IN LOGIN.PASSWORD%TYPE);
    PROCEDURE GET_INSTRUCTOR_COUNT(INSTRUCTOR_COUNT OUT NUMBER) ;
    PROCEDURE GET_STUDENT_COUNT(STUDENT_COUNT OUT NUMBER);
END LOGIN_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package MATERIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "MATERIAL_PACKAGE" AS
PROCEDURE AddMaterial(Material_Name IN Material.MaterialName%TYPE,Material_Path IN Material.MaterialPath%TYPE,Course_ID IN Material.CourseID%TYPE,Video_Url IN Material.VideoUrl%TYPE);
PROCEDURE UpdateMaterial(Material_ID IN Material.MaterialID%TYPE, Material_Name IN Material.MaterialName%TYPE, Material_Path IN Material.MaterialPath%TYPE, Course_ID IN Material.CourseID%TYPE,Video_Url IN Material.VideoUrl%TYPE);
PROCEDURE DeleteMaterial(Material_ID IN Material.MaterialID%TYPE);
PROCEDURE GetMaterialByID(Material_ID IN Material.MaterialID%TYPE);
PROCEDURE GetAllMaterials;
PROCEDURE GetMaterialsByCourse(Course_ID IN Material.CourseID%TYPE);
PROCEDURE GetLatestMaterials(NumMaterials IN NUMBER);  --NumMaterials: number of the  latest materials to retrieve.
END Material_Package;

/
--------------------------------------------------------
--  DDL for Package NOTIFICATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "NOTIFICATION_PACKAGE" 
As
 
PROCEDURE CreateNotification(Section_Id in Notifications.SectionId%type,Notification_Text in Notifications.NotificationText%type,Notification_StartDate in Notifications.NotificationStartDate%type DEFAULT SYSDATE ,Notification_EndDate in Notifications.NotificationEndDate%type);
PROCEDURE UpdateNotification(Notification_Id in Notifications.NotificationId%type,Section_Id in Notifications.SectionId%type,Notification_Text in Notifications.NotificationText%type,Notification_StartDate in Notifications.NotificationStartDate%type DEFAULT SYSDATE ,Notification_EndDate in Notifications.NotificationEndDate%type );
PROCEDURE DeleteNotification(Notification_Id IN NUMBER);
PROCEDURE GetNotificationsByDate;
PROCEDURE GetNotificationsBySection (Section_Id IN NOTIFICATIONS.SECTIONID%TYPE);
End Notification_Package;

/
--------------------------------------------------------
--  DDL for Package POLLOPTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "POLLOPTION_PACKAGE" 
AS
PROCEDURE AddPollOption(p_PollID IN PollOptions.PollID%TYPE, p_OptionText IN PollOptions.OptionText%TYPE);
PROCEDURE UpdatePollOption(p_OptionID IN PollOptions.OptionID%TYPE, p_OptionText IN PollOptions.OptionText%TYPE);
PROCEDURE DeletePollOption(p_OptionID IN PollOptions.OptionID%TYPE);
PROCEDURE GetPollOptions(p_PollID IN PollOptions.PollID%TYPE);
END PollOption_Package;

/
--------------------------------------------------------
--  DDL for Package POLLRESPONSE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "POLLRESPONSE_PACKAGE" 
AS
PROCEDURE SubmitPollResponse(
    P_PollID IN PollResponses.PollID%TYPE,
    P_UserID IN PollResponses.UserID%TYPE,
    P_OptionID IN PollResponses.OptionID%TYPE
);
PROCEDURE UpdatePollResponse(
    P_PollResponseID IN PollResponses.PollResponseID%TYPE,
    P_OptionID IN PollResponses.OptionID%TYPE
);
PROCEDURE DeletePollResponse(P_PollResponseID IN PollResponses.PollResponseID%TYPE) ;
PROCEDURE GetAllResponsesForPoll (P_PollID IN PollResponses.PollID%TYPE) ;

PROCEDURE GetUserPollResponses(P_UserID IN PollResponses.UserID%TYPE) ;
END PollResponse_Package;

/
--------------------------------------------------------
--  DDL for Package POLL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "POLL_PACKAGE" 
AS
PROCEDURE CreatePoll(
    p_Title IN Polls.Title%TYPE,
    p_Description IN Polls.Description%TYPE,
    p_StartDate IN Polls.StartDate%TYPE,
    p_EndDate IN Polls.EndDate%TYPE,
    p_Section IN Polls.SECTIONID%TYPE
); 
PROCEDURE UpdatePoll(
    p_PollID IN Polls.PollID%TYPE,
    p_Title IN Polls.Title%TYPE,
    p_Description IN Polls.Description%TYPE,
    p_StartDate IN Polls.StartDate%TYPE,
    p_EndDate IN Polls.EndDate%TYPE,
    p_Section IN Polls.SECTIONID%type
);
PROCEDURE DeletePoll(  p_PollID IN Polls.PollID%TYPE);
PROCEDURE GetPollByID(p_PollID IN Polls.PollID%TYPE) ;
PROCEDURE GetAllPolls ;
End  Poll_Package ;

/
--------------------------------------------------------
--  DDL for Package PROGRAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PROGRAM_PACKAGE" 
as
PROCEDURE CreateProgram(
    p_TrackName IN VARCHAR2,
    p_ImagePath IN VARCHAR2,
    p_Description IN VARCHAR2,
    p_ProgramPeriod IN VARCHAR2
);
procedure GetAllPrograms;
procedure GetAdminPrograms;
PROCEDURE GetProgramByID(
    p_ProgramID IN NUMBER
);
PROCEDURE UpdateProgram(
    p_ProgramID IN NUMBER,
    p_TrackName IN VARCHAR2,
    p_ImagePath IN VARCHAR2,
    p_Description IN VARCHAR2,
    p_ProgramPeriod IN VARCHAR2
);

PROCEDURE DeleteProgram(
    p_ProgramID IN NUMBER
);
PROCEDURE GET_STUDENT_PROGRAM(
        USER_ID IN USERS.USERID%TYPE
    );
            PROCEDURE UPDATE_PROGRAM_IMAGE(
        PROGRAM_ID IN PROGRAM.PROGRAMID%TYPE,
        NEW_IMG IN PROGRAM.IMAGEPATH%TYPE
    );
    PROCEDURE GetProgramStudentCount;
end Program_Package;

/
--------------------------------------------------------
--  DDL for Package QUESTIONS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "QUESTIONS_PACKAGE" 
AS
PROCEDURE CreateQuestion (
    p_QuestionText IN Questions.QuestionText%TYPE,
    p_Marks IN Questions.Marks%TYPE,
    p_AssessmentID IN Questions.AssessmentID%TYPE
);
PROCEDURE GetQuestionByID ( p_QuestionID IN Questions.QuestionID%TYPE) ;
PROCEDURE UpdateQuestion (
    p_QuestionID IN Questions.QuestionID%TYPE,
    p_QuestionText IN Questions.QuestionText%TYPE,
    p_Marks IN Questions.Marks%TYPE,
    p_AssessmentID IN Questions.AssessmentID%TYPE
);
PROCEDURE DeleteQuestion ( p_QuestionID IN Questions.QuestionID%TYPE);
PROCEDURE ListQuestionsByAssessment (p_AssessmentID IN Questions.AssessmentID%TYPE);
PROCEDURE UpdateQuestionMarks (p_QuestionID IN Questions.QuestionID%TYPE,p_NewMarks IN Questions.Marks%TYPE);
END Questions_Package ; 

/
--------------------------------------------------------
--  DDL for Package REVIEWINSTRUCTOR_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "REVIEWINSTRUCTOR_PACKAGE" AS
    PROCEDURE CreateReview(
        Review_Content IN ReviewInstructor.ReviewContent%TYPE,
        Review_Rating IN ReviewInstructor.Rating%TYPE,
        Review_Date IN ReviewInstructor.ReviewDate%TYPE DEFAULT SYSDATE,
        Section_ID IN ReviewInstructor.SectionID%TYPE
    );

    PROCEDURE DeleteReview(Review_Id IN NUMBER);
    PROCEDURE GetAllReviews;
    PROCEDURE GetLastThreeHighRatedReviews;
END ReviewInstructor_Package;

/
--------------------------------------------------------
--  DDL for Package ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ROLE_PACKAGE" 
AS
PROCEDURE GET_ALL_ROLES;
PROCEDURE GET_ROLE_BY_ID (ID IN NUMBER);
PROCEDURE CREATE_ROLE(ROLE_NAME IN ROLE.ROLENAME%TYPE);
PROCEDURE UPDATE_ROLE(ROLE_ID IN ROLE.ROLEID%TYPE, ROLE_NAME IN ROLE.ROLENAME%TYPE);
PROCEDURE DELETE_ROLE(ROLE_ID IN ROLE.ROLEID%TYPE);
END ROLE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package SECTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SECTION_PACKAGE" 

As
 
PROCEDURE GetAllSections;

PROCEDURE GetSectionById(Section_Id IN NUMBER, User_Id IN NUMBER);

PROCEDURE GetSectionInfo(Section_Id IN NUMBER);

PROCEDURE GetSectionByCourseId(Course_Id IN NUMBER);

PROCEDURE CreateSection(Section_Name in Section.SectionName%type,Time_Lecture in Section.TimeLecture%type,Meeting_Link in Section.MeetingLink %type ,Course_Id in Section.CourseId%type,Instructor_Id in Section.InstructorId%type,Lecture_Days in Section.LectureDays%type,Image_Path in Section.ImagePath%type);

PROCEDURE UpdateSection(Section_Id in Section.SectionId%type,Section_Name in Section.SectionName%type,Time_Lecture in Section.TimeLecture%type,Meeting_Link in Section.MeetingLink %type ,Course_Id in Section.CourseId%type,Instructor_Id in Section.InstructorId%type,Lecture_Days in Section.LectureDays%type,Image_Path in Section.ImagePath%type);

PROCEDURE DeleteSection(Section_Id IN NUMBER);

PROCEDURE GetCourseBySectionId(Section_Id IN NUMBER);

PROCEDURE GetInstructorSections(Instructor_Id IN NUMBER);

PROCEDURE GETSECTIONCOUNT(SECTION_COUNT OUT NUMBER);
PROCEDURE GETINSTRUCTORSECTIONCOUNT(INSTRUCTOR_ID IN NUMBER, SECTION_COUNT OUT NUMBER);

End Section_Package;

/
--------------------------------------------------------
--  DDL for Package SLIDER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SLIDER_PACKAGE" 
AS
PROCEDURE InsertSlider(image_path IN Slider.ImagePath%type);
PROCEDURE UpdateSlider(slider_id IN Slider.SliderID%type, image_path IN Slider.ImagePath%type);
PROCEDURE DeleteSlider(slider_id IN Slider.SliderID%type);
PROCEDURE GetSliderByID(slider_id IN Slider.SliderID%type);
PROCEDURE GetAllSliders;
END Slider_Package;

/
--------------------------------------------------------
--  DDL for Package STD_SECTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STD_SECTION_PACKAGE" AS
    PROCEDURE GET_ALL_STD_SECTIONS;
    PROCEDURE GET_STD_SECTION_BY_ID(STD_SECTION_ID IN NUMBER);
    PROCEDURE GET_STD_SECTIONS_BY_SECTION_ID(SECTION_ID IN NUMBER);
    PROCEDURE CREATE_STD_SECTION(SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER);
    PROCEDURE UPDATE_STD_SECTION(STD_SECTION_ID IN NUMBER, SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER);
    PROCEDURE DELETE_STD_SECTION(STD_SECTION_ID IN NUMBER);
    PROCEDURE GET_STD_SECTION_INFO;
    PROCEDURE GET_STD_SECTION_INFO_BY_SECTION_ID(SECTION_ID IN NUMBER);
    PROCEDURE GET_STD_SECTION_BY_SECTION_ID(SECTION_ID IN NUMBER, ASSESSMENT_ID IN NUMBER);
    PROCEDURE GET_USER_SECTION(student_id IN USERS.userid%type);
    PROCEDURE SET_FLAG(SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER);
    PROCEDURE LIST_STUDENT_GRADES (ASSESSMENT_ID IN ASSESSMENTS.ASSESSMENTID%TYPE);
    PROCEDURE GetCertificateURL(pUserId IN Certificates.USERID%TYPE, pSectionId IN Section.SectionID%TYPE);
    PROCEDURE GET_STUDENTS_INFO_BY_SECTION(SECTION_ID IN NUMBER) ;
END STD_SECTION_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package STUDENT_GRADE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STUDENT_GRADE_PACKAGE" AS
        PROCEDURE GET_STUDENT_GRADE_INFO(
        USER_ID IN USERS.USERID%TYPE,
        SECTION_ID IN Section.SectionID%TYPE
    );
END STUDENT_GRADE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package TESTIMONIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "TESTIMONIAL_PACKAGE" 
As
 
PROCEDURE CreateTestimonial(Testimonial_Text in Testimonial.TestimonialText%type,Testimonial_Date in Testimonial.TestimonialDate%type DEFAULT SYSDATE ,Testimonial_Status in Testimonial.TestimonialStatus%type DEFAULT 0,User_Id in Testimonial.USERID%type);
PROCEDURE UpdateTestimonialStatus(Testimonial_Id in Testimonial.TestimonialId%type,Testimonial_Status in Testimonial.TestimonialStatus%type );
PROCEDURE DeleteTestimonial(Testimonial_Id IN NUMBER);
PROCEDURE GetAllTestimonials;
PROCEDURE GetTestimonialsByStatus;
End Testimonial_Package;

/
--------------------------------------------------------
--  DDL for Package USERSOLUTIONS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USERSOLUTIONS_PACKAGE" 
AS
PROCEDURE AddUserSolution (
    p_UserID IN UserSolution.UserID%TYPE,
    p_AssessmentID IN UserSolution.AssessmentID%TYPE,
    p_QuestionID IN UserSolution.QuestionID%TYPE,
    p_AnswerID IN UserSolution.AnswerID %TYPE,
    p_UserSolution IN UserSolution.UserSolutionText%TYPE,
    p_AttemptDate IN UserSolution.AttemptDate%TYPE
  
) ;
PROCEDURE getUserSolutionByAssessment(p_AssessmentID IN UserSolution.AssessmentID%TYPE,
p_UserID IN UserSolution.UserID%TYPE) ; 

PROCEDURE CalculateUserScore(p_AssessmentID IN UserSolution.AssessmentID%TYPE, p_UserID IN UserSolution.UserID%TYPE,totalMarks OUT NUMBER);


PROCEDURE UPDATE_UserSolution(
    p_SOLUTIONID IN UserSolution.SOLUTIONID%TYPE,
    p_UserID IN UserSolution.UserID%TYPE,
    p_AssessmentID IN UserSolution.AssessmentID%TYPE,
    p_QuestionID IN UserSolution.QuestionID%TYPE,
    p_AnswerID IN UserSolution.AnswerID %TYPE,
    p_UserSolutionText IN UserSolution.UserSolutionText%TYPE,
    p_AttemptDate IN UserSolution.AttemptDate%TYPE
    );
 
    PROCEDURE DELETE_UserSolution(UserSolution_ID IN UserSolution.SOLUTIONID%TYPE);


END UserSolutions_Package ;

/
--------------------------------------------------------
--  DDL for Package USER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USER_PACKAGE" AS
    PROCEDURE GET_ALL_USERS;
    PROCEDURE GET_ALL_STUDENTS;
    PROCEDURE GET_ALL_INSTRUCTORS;
    PROCEDURE GET_USER_BY_ID (ID IN NUMBER);
    PROCEDURE CREATE_USER(
        FIRSTNAME IN USERS.FIRSTNAME%TYPE,
        LASTNAME IN USERS.LASTNAME%TYPE,
        DATEOFBIRTH IN USERS.DATEOFBIRTH%TYPE,
        IMAGEPATH IN USERS.IMAGEPATH%TYPE,
        ADDRESS IN USERS.ADDRESS%TYPE,
        PHONENUMBER IN USERS.PHONENUMBER%TYPE,
        REGISTRATIONDATE IN USERS.REGISTRATIONDATE%TYPE,
        ISACTIVE IN USERS.ISACTIVE%TYPE,
        CREATED_USERID OUT USERS.USERID%TYPE
    );
    PROCEDURE UPDATE_USER(
        USER_ID IN USERS.USERID%TYPE,
        FIRST_NAME IN USERS.FIRSTNAME%TYPE,
        LAST_NAME IN USERS.LASTNAME%TYPE,
        DATE_OF_BIRTH IN USERS.DATEOFBIRTH%TYPE,
        IMAGE_PATH IN USERS.IMAGEPATH%TYPE,
        ADDRESS_ IN USERS.ADDRESS%TYPE,
        PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,
        REGISTRATION_DATE IN USERS.REGISTRATIONDATE%TYPE,
        IS_ACTIVE IN USERS.ISACTIVE%TYPE
    );
    PROCEDURE UPDATE_ISACTIVE_USER(
        USER_ID IN USERS.USERID%TYPE,
        IS_ACTIVE IN USERS.ISACTIVE%TYPE
    );
    PROCEDURE UPDATE_USER_IMAGE(
        USER_ID IN USERS.USERID%TYPE,
        NEW_IMG IN USERS.IMAGEPATH%TYPE
    );

        PROCEDURE UPDATE_USER_PHONE(
        USER_ID IN USERS.USERID%TYPE,
        NEW_PHONE IN USERS.PHONENUMBER%TYPE
    );
    PROCEDURE DELETE_USER(USER_ID IN USERS.USERID%TYPE);
PROCEDURE GET_STUDENTS_WITH_CV;
END USER_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body ABOUTUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ABOUTUS_PACKAGE" 
AS
PROCEDURE CreateAboutUs (
    p_AboutUsText IN AboutUs.AboutUsText%TYPE,
    p_LastUpdated IN AboutUs.LastUpdated%TYPE
)
AS
BEGIN
    INSERT INTO AboutUS (AboutUsText, lastupdated)
    VALUES (p_AboutUsText, p_LastUpdated);
END CreateAboutUs;

PROCEDURE UpdateAboutUs (
    p_AboutUsID IN AboutUs.AboutUsId%TYPE,
    p_AboutUsText IN AboutUs.AboutUsText%TYPE,
    p_LastUpdated IN AboutUs.LastUpdated%TYPE
) AS
BEGIN
    UPDATE AboutUs
    SET AboutUsText = p_AboutUsText,
        LastUpdated = p_LastUpdated
    WHERE AboutUsID = p_AboutUsID;
END UpdateAboutUs;

PROCEDURE GetAllAboutus
AS
Get_Cur SYS_REFCURSOR;
Begin
open Get_Cur for 
select * from AboutUs ;
dbms_sql.return_result(Get_Cur);
End GetAllAboutus ;

END AboutUs_Package ;





/
--------------------------------------------------------
--  DDL for Package Body ANSWER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ANSWER_PACKAGE" 
AS
    PROCEDURE CREATE_ANSWER(QUESTION_ID IN ANSWER.QUESTIONID%TYPE, ANSWER_TEXT IN ANSWER.ANSWERTEXT%TYPE, IS_CORRECT IN ANSWER.ISCORRECT%TYPE) AS
    BEGIN
        INSERT INTO ANSWER (QUESTIONID, ANSWERTEXT, ISCORRECT)
        VALUES (QUESTION_ID, ANSWER_TEXT, IS_CORRECT);
    END CREATE_ANSWER;

    PROCEDURE GET_ANSWER_BY_ID(ANSWER_ID IN ANSWER.ANSWERID%TYPE) AS
        RECORDS SYS_REFCURSOR;
    BEGIN
        OPEN RECORDS FOR
            SELECT * FROM ANSWER
            WHERE ANSWERID = ANSWER_ID;
        DBMS_SQL.RETURN_RESULT(RECORDS);
    END GET_ANSWER_BY_ID;

    PROCEDURE UPDATE_ANSWER(ANSWER_ID IN ANSWER.ANSWERID%TYPE,QUESTION_ID IN ANSWER.QUESTIONID%TYPE, ANSWER_TEXT IN ANSWER.ANSWERTEXT%TYPE, IS_CORRECT IN ANSWER.ISCORRECT%TYPE) AS
    BEGIN
        UPDATE ANSWER
        SET ANSWERTEXT = ANSWER_TEXT,
            ISCORRECT = IS_CORRECT,
            QUESTIONID = QUESTION_ID
        WHERE ANSWERID = ANSWER_ID;
    END UPDATE_ANSWER;

    PROCEDURE DELETE_ANSWER(ANSWER_ID IN ANSWER.ANSWERID%TYPE) AS
    BEGIN
        DELETE FROM ANSWER
        WHERE ANSWERID = ANSWER_ID;
    END DELETE_ANSWER;

    PROCEDURE LIST_ANSWERS_BY_QUESTION(QUESTION_ID IN ANSWER.QUESTIONID%TYPE) AS
        RECORDS SYS_REFCURSOR;
    BEGIN
        OPEN RECORDS FOR
            SELECT * FROM ANSWER
            WHERE QUESTIONID = QUESTION_ID;
        DBMS_SQL.RETURN_RESULT(RECORDS);
    END LIST_ANSWERS_BY_QUESTION;
    
    PROCEDURE LIST_QUESTION_AND_ANSWERS (ASSESSMENT_ID IN QUESTIONS.ASSESSMENTID%TYPE)
AS
    RECORDS SYS_REFCURSOR;
BEGIN
    OPEN RECORDS FOR
        SELECT ASS.ASSESSMENTID, Q.QUESTIONID, Q.QUESTIONTEXT, Q.MARKS, A.ANSWERID, A.ANSWERTEXT, A.ISCORRECT
        FROM ASSESSMENTS ASS
        JOIN QUESTIONS Q ON ASS.ASSESSMENTID = Q.ASSESSMENTID
        LEFT JOIN ANSWER A ON Q.QUESTIONID = A.QUESTIONID
        WHERE ASS.ASSESSMENTID = ASSESSMENT_ID
        ORDER BY Q.QUESTIONID;
    DBMS_SQL.RETURN_RESULT(RECORDS);
END LIST_QUESTION_AND_ANSWERS;

    
END ANSWER_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body ASSESSMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ASSESSMENT_PACKAGE" 
As 
PROCEDURE GetAllAssessments
As
Get_Cur SYS_REFCURSOR;
Begin
open Get_Cur for
Select * from Assessments;
dbms_sql.return_result(Get_Cur);
End GetAllAssessments;

PROCEDURE GetAssessmentById(id in number)
As
Get_Cur SYS_REFCURSOR;
Begin
open Get_Cur for
select * from Assessments
where AssessmentID = id;
dbms_sql.return_result(Get_Cur);
End GetAssessmentById ; 


PROCEDURE CreateAssessment (
    p_Title IN Assessments.Title%TYPE,
    p_Description IN Assessments.Description%TYPE,
    p_AssessmentType IN Assessments.AssessmentType%TYPE,
    p_StartDate IN Assessments.StartDate%TYPE,
    p_EndDate IN Assessments.EndDate%TYPE,
    p_StartTime IN Assessments.StartTime%TYPE,
    p_EndTime IN Assessments.EndTime%TYPE,
    p_AssessmentScore IN Assessments.AssessmentScore%TYPE,
    p_AttachFile IN Assessments.AttachFile%TYPE , 
    p_SectionID IN Assessments.SectionID%TYPE
)
As
Begin
insert into Assessments(Title , Description ,AssessmentType,StartDate,EndDate,StartTime,EndTime,AssessmentScore,AttachFile,SectionID ) values (p_Title, p_Description, p_AssessmentType,p_StartDate , p_EndDate , p_StartTime,p_EndTime ,  p_AssessmentScore , p_AttachFile ,  p_SectionID );
commit;
End CreateAssessment;



PROCEDURE UpdateAssessment(
    p_AssessmentID IN Assessments.AssessmentID%TYPE,
    p_Title IN Assessments.Title%TYPE,
    p_Description IN Assessments.Description%TYPE,
    p_AssessmentType IN Assessments.AssessmentType%TYPE,
    p_StartDate IN Assessments.StartDate%TYPE,
    p_EndDate IN Assessments.EndDate%TYPE,
    p_StartTime IN Assessments.StartTime%TYPE,
    p_EndTime IN Assessments.EndTime%TYPE,
    p_AssessmentScore IN Assessments.AssessmentScore%TYPE,
    p_AttachFile IN Assessments.AttachFile%TYPE , 
    p_SectionID IN Assessments.SectionID%TYPE
)
As
BEGIN
Update ASSESSMENTS
Set Title = p_Title, Description = p_Description  , AssessmentType = p_AssessmentType, StartDate = p_StartDate , 
EndDate = p_EndDate ,   StartTime = p_StartTime , EndTime= p_EndTime , 
AssessmentScore = p_AssessmentScore ,AttachFile= p_AttachFile , 
SectionID = p_SectionID
where AssessmentID = p_AssessmentID ; 
commit;
End UpdateAssessment;


PROCEDURE DeleteAssessment ( p_AssessmentID IN Assessments.AssessmentID%TYPE)
As
Begin
delete from Assessments 
where AssessmentID = p_AssessmentID;
commit;
End DeleteAssessment;

PROCEDURE  ListAssessmentsByType (p_AssessmentType IN Assessments.AssessmentType%TYPE)
As
Get_Cur SYS_REFCURSOR;
Begin
open Get_Cur for
        SELECT * FROM Assessments
        WHERE AssessmentType = p_AssessmentType;
dbms_sql.return_result(Get_Cur);
END ListAssessmentsByType;


PROCEDURE CountAssessmentsBySection (p_SectionID IN NUMBER,p_Count OUT NUMBER)
 AS
BEGIN
    SELECT COUNT(*)
    INTO p_Count
    FROM Assessments
    WHERE SectionID = p_SectionID;
END CountAssessmentsBySection;

PROCEDURE FilterAssessmentsByDate (
    p_StartDate IN DATE,
    p_EndDate IN DATE
) AS
    p_Records SYS_REFCURSOR;
BEGIN
    OPEN p_Records FOR
        SELECT * FROM Assessments
        WHERE EndDate BETWEEN p_StartDate AND p_EndDate;
    dbms_sql.return_result(p_Records);
END FilterAssessmentsByDate;





PROCEDURE GetUpcomingAssessments 
AS
p_Records SYS_REFCURSOR;
BEGIN
    OPEN p_Records FOR
        SELECT * FROM Assessments
        WHERE EndDate >= SYSDATE;
dbms_sql.return_result(p_Records);
END GetUpcomingAssessments;


PROCEDURE CountAssessmentsByType (
    p_AssessmentType IN Assessments.AssessmentType%TYPE,
    p_Count OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*)
    INTO p_Count
    FROM Assessments
    WHERE AssessmentType = p_AssessmentType;
END CountAssessmentsByType;

PROCEDURE GetAssessmentBysectionId(section_id in number)
As
Get_Cur SYS_REFCURSOR;
Begin
open Get_Cur for
select * from Assessments
where SectionId = section_id
order by assessments.startdate;
dbms_sql.return_result(Get_Cur);
end GetAssessmentBysectionId;



END Assessment_Package;

/
--------------------------------------------------------
--  DDL for Package Body ATTENDANCE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ATTENDANCE_PACKAGE" 
AS
PROCEDURE InsertAttendance(section_id IN Attendance.SectionID%type, date_attendance IN Attendance.DateOfAttendance%type, learner_id IN Attendance.USERID%type, attendance_status IN Attendance.Status%type)
AS
BEGIN
INSERT INTO Attendance (SectionID, DateOfAttendance, USERID, Status)
VALUES (section_id, date_attendance, learner_id, attendance_status);
COMMIT;
END InsertAttendance;


PROCEDURE UpdateAttendance(attendance_id IN Attendance.AttendanceID%type, section_id IN Attendance.SectionID%type, date_attendance IN Attendance.DateOfAttendance%type, learner_id IN Attendance.USERID%type, attendance_status IN Attendance.Status%type)
AS
BEGIN
UPDATE Attendance
SET SectionID = section_id, DateOfAttendance = date_attendance, USERID = learner_id, Status = attendance_status
WHERE AttendanceID = attendance_id;
COMMIT;
END UpdateAttendance;

PROCEDURE DeleteAttendance(attendance_id IN Attendance.AttendanceID%type)
AS
BEGIN
DELETE  Attendance WHERE AttendanceID = attendance_id;
COMMIT;
END DeleteAttendance;

PROCEDURE GetAttendanceDetails(attendance_id IN Attendance.AttendanceID%type)
AS
c_detail sys_refcursor;
BEGIN
open c_detail for 
SELECT * FROM Attendance WHERE AttendanceID = attendance_id;
DBMS_SQL.RETURN_RESULT(c_detail);
END GetAttendanceDetails;

PROCEDURE GetAttendanceBySection(section_id IN Attendance.SectionID%type)
AS
GetBySection_Cur  sys_refcursor;
BEGIN
open GetBySection_Cur for 
SELECT * FROM Attendance WHERE SectionID = section_id;
DBMS_SQL.RETURN_RESULT(GetBySection_Cur);

END GetAttendanceBySection;

PROCEDURE GetAttendanceByUser(
  user_id IN Attendance.USERID%type
)
AS
  GetByUserAndSection_Cur sys_refcursor;
BEGIN
  OPEN GetByUserAndSection_Cur FOR 
    SELECT
      a.dateofattendance,
      a.USERID,
      a.STATUS,
      s.SECTIONNAME
    FROM Attendance a
    JOIN Section s ON a.SECTIONID = s.SECTIONID
    WHERE a.USERID = user_id
    ORDER BY a.dateofattendance DESC;
 
  DBMS_SQL.RETURN_RESULT(GetByUserAndSection_Cur);
END GetAttendanceByUser;

PROCEDURE GetAttendanceByDate(date_attendance IN Attendance.DateOfAttendance%type)
AS
GetByDate_Cur sys_refcursor;
BEGIN
  open GetByDate_Cur for
  SELECT * FROM Attendance WHERE TRUNC(DateOfAttendance) = TRUNC(date_attendance);
  DBMS_SQL.RETURN_RESULT(GetByDate_Cur);
END GetAttendanceByDate;


PROCEDURE GetAttendanceByStatus(attendance_status IN Attendance.Status%type)
AS
GetByStatus_Cur sys_refcursor;
BEGIN
    OPEN GetByStatus_Cur FOR
    SELECT * FROM Attendance 
    WHERE Status = attendance_status;

    DBMS_SQL.RETURN_RESULT(GetByStatus_Cur);
END GetAttendanceByStatus;

PROCEDURE GetPresentAttendanceCount(present_count OUT NUMBER)
AS
BEGIN
  SELECT COUNT(*) INTO present_count FROM Attendance 
  WHERE Status = 'Present';
END GetPresentAttendanceCount;
PROCEDURE GetAbsentAttendanceCount(absent_count OUT NUMBER)
AS
BEGIN
SELECT COUNT(*) INTO absent_count FROM Attendance WHERE Status = 'Absent';
END GetAbsentAttendanceCount;

PROCEDURE GetPresentAttendanceCountForUser(user_id IN Attendance.USERID%type,  section_id IN Attendance.SectionID%type)
AS
presentCount_Cur  sys_refcursor;
BEGIN
open presentCount_Cur for 
SELECT COUNT(*) FROM Attendance a
WHERE  
USERID = user_id AND a.SectionID= section_id AND Status = 'Present' ;
DBMS_SQL.RETURN_RESULT(presentCount_Cur);
 
END GetPresentAttendanceCountForUser;
 
 
PROCEDURE GetAbsentAttendanceCountForUser(user_id IN Attendance.USERID%type, section_id IN Attendance.SectionID%type)
AS
absenttCount_Cur  sys_refcursor;
BEGIN
open absenttCount_Cur for 
SELECT COUNT(*) FROM Attendance a
WHERE  
USERID = user_id  AND a.SectionID= section_id AND Status = 'Absent';
DBMS_SQL.RETURN_RESULT(absenttCount_Cur);
 
END GetAbsentAttendanceCountForUser;

PROCEDURE GetAttendanceByUserAndSection(
  user_id IN Attendance.USERID%type,
  section_id IN Attendance.SectionID%type
)
AS
  GetByUserAndSection_Cur sys_refcursor;
BEGIN
  OPEN GetByUserAndSection_Cur FOR 
    SELECT * FROM Attendance
    WHERE USERID = user_id AND SectionID = section_id
    ORDER BY DateOfAttendance DESC;
  DBMS_SQL.RETURN_RESULT(GetByUserAndSection_Cur);
END GetAttendanceByUserAndSection;
 
 
PROCEDURE GetTopStudentsByAttendanceForEachSection(instructor_id IN Users.UserId%TYPE)
AS
    TopStudents_Cur SYS_REFCURSOR;
BEGIN
    OPEN TopStudents_Cur FOR
        SELECT
            s.SectionID,
            s.SectionName,
            a.USERID AS StudentId,
            u.FirstName || ' ' || u.LastName AS StudentName,
            COUNT(*) AS AttendanceCount
        FROM
            Attendance a
            JOIN Users u ON a.USERID = u.UserId
            JOIN Section s ON a.SectionID = s.SectionID
            JOIN Course c ON s.CourseID = c.CourseID
            JOIN Program p ON c.ProgramID = p.ProgramID
        WHERE
            s.InstructorID = instructor_id AND
            a.DateOfAttendance >= (SELECT MAX(DateOfAttendance) FROM Attendance WHERE SectionID = a.SectionID) - 3 AND
            a.Status = 'Present'
        GROUP BY
            s.SectionID, s.SectionName, a.USERID, u.FirstName, u.LastName
        ORDER BY
            s.SectionID, AttendanceCount DESC
        FETCH FIRST 4 ROWS ONLY;
 
    DBMS_SQL.RETURN_RESULT(TopStudents_Cur);
END GetTopStudentsByAttendanceForEachSection;
END Attendance_Package;

/
--------------------------------------------------------
--  DDL for Package Body BATCH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "BATCH_PACKAGE" 
as 
PROCEDURE CreateBatch(
    p_ProgramID IN NUMBER,
    p_NumberOfBatches IN NUMBER
)
AS
BEGIN
    INSERT INTO Batches(ProgramID, NumberOfBatches)
    VALUES (p_ProgramID, p_NumberOfBatches);
    COMMIT;
END CreateBatch;
PROCEDURE GetBatchesByProgramID(
    p_ProgramID IN NUMBER
)
AS
Get_Cur SYS_REFCURSOR ;
Begin
open Get_Cur for 
select * from Batches where ProgramID = p_ProgramID;
dbms_sql.return_result(Get_Cur);
END GetBatchesByProgramID;
PROCEDURE UpdateNumberOfBatches(
    p_BatchID IN NUMBER,
    p_NewNumberOfBatches IN NUMBER
)
AS
BEGIN
    UPDATE Batches
    SET NumberOfBatches = p_NewNumberOfBatches
    WHERE BatchesID = p_BatchID;
    COMMIT;
END UpdateNumberOfBatches;
PROCEDURE DeleteBatch(
    p_BatchID IN NUMBER
)
AS
BEGIN
    DELETE FROM Batches WHERE BatchesID = p_BatchID;
    COMMIT;
END DeleteBatch;

procedure GetAllBatches
as
Get_Cur SYS_REFCURSOR ;
Begin
open Get_Cur for 
select * from Batches;
dbms_sql.return_result(Get_Cur);
end  GetAllBatches;


end Batch_Package;

/
--------------------------------------------------------
--  DDL for Package Body CERTIFICATE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CERTIFICATE_PACKAGE" 
as
  PROCEDURE SaveCertificate (
    P_USER_ID IN CERTIFICATES.USERID%TYPE,
    P_COURSE_ID IN CERTIFICATES.COURSEID%TYPE,
    P_RELEASE_DATE IN CERTIFICATES.RELEASEDATE%TYPE,
    P_EXPIRE_DATE IN CERTIFICATES.EXPIREDATE%TYPE,
        P_CERTIFICATEURL IN CERTIFICATES.CERTIFICATECLOUDINARYURL%Type
)
  AS
  BEGIN
    INSERT INTO CERTIFICATES (USERID, COURSEID, RELEASEDATE, EXPIREDATE,CERTIFICATECLOUDINARYURL)
    VALUES (P_USER_ID, P_COURSE_ID, P_RELEASE_DATE, P_EXPIRE_DATE,P_CERTIFICATEURL);

    COMMIT;
  END SaveCertificate;


PROCEDURE GetUserCertificates (P_USER_ID IN CERTIFICATES.USERID%TYPE)
AS
P_RESULT SYS_REFCURSOR;
BEGIN
        OPEN P_RESULT FOR
        SELECT *
      FROM CERTIFICATES C
      INNER JOIN COURSE CR ON C.COURSEID = CR.CourseID
      WHERE C.USERID = P_USER_ID;
     dbms_sql.return_result(P_RESULT);

END GetUserCertificates;

PROCEDURE UpdateUserCertificate(P_USER_ID IN CERTIFICATES.USERID%TYPE, P_COURSE_ID IN CERTIFICATES.COURSEID%TYPE, P_CERTIFICATEURL IN CERTIFICATES.CERTIFICATECLOUDINARYURL%Type)
As
BEGIN
UPDATE CERTIFICATES
SET CERTIFICATECLOUDINARYURL = P_CERTIFICATEURL
WHERE USERID = P_USER_ID
AND COURSEID = P_COURSE_ID;
END UpdateUserCertificate;



END Certificate_Package;

/
--------------------------------------------------------
--  DDL for Package Body CONTACT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CONTACT_PACKAGE" 
as 
PROCEDURE GetAllContact AS
       allContact_cursor SYS_REFCURSOR;
   BEGIN
      OPEN allContact_cursor FOR
         SELECT * FROM Contact;
      DBMS_SQL.RETURN_RESULT(allContact_cursor);
   END GetAllContact;

PROCEDURE  CreateContact(pName in Contact.Name%type,pEmail in Contact.Email%type,pPhoneNumber in Contact.PhoneNumber%type,
pMessage in Contact.Message%type,pContact_Date in Contact.ContactDate%type DEFAULT SYSDATE)
As
Begin
insert into Contact(Name,Email,PhoneNumber,Message,ContactDate) values (pName,pEmail,pPhoneNumber,pMessage,pContact_Date);
commit;
End CreateContact;

PROCEDURE DeleteContact(Contact_Id IN NUMBER)
AS
BEGIN
DELETE from Contact WHERE ContactId =Contact_Id;
COMMIT;
END DeleteContact;
end Contact_Package;




/
--------------------------------------------------------
--  DDL for Package Body COURSE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COURSE_PACKAGE" 

As 

PROCEDURE GETALLCOURSES

AS

All_courses SYS_REFCURSOR;

BEGIN

OPEN All_courses FOR

SELECT * FROM COURSE C
inner join Program P On
c.programid=p.programid ;

DBMS_SQL.RETURN_RESULT(All_courses);

End GetAllCourses;


PROCEDURE GetCourseById(Course_Id IN NUMBER)

As

Get_course SYS_REFCURSOR;

Begin

open Get_course for

select * from course

where courseid = Course_Id;

dbms_sql.return_result(Get_course);

End GetCourseById;

PROCEDURE GetCourseByProgramId(Program_Id IN NUMBER)

As

Get_course SYS_REFCURSOR;

Begin

open Get_course for

select * from course

where programid = Program_Id;

dbms_sql.return_result(Get_course);

End GetCourseByProgramId;

PROCEDURE CreateCourse(Course_Name in Course.CourseName%type,Program_Id in Course.ProgramId%type,Start_Date in Course.StartDate%type ,End_Date in Course.EndDate%type,Image_Path in Course.ImagePath%type,NumberSections in Course.NumberOfSections%type,CPreRequisite in Course.Prerequisite%type)
As

Begin

insert into course values (default ,Course_Name,Program_Id,Start_Date,End_Date,Image_Path,NumberSections,CPreRequisite);

commit;

End CreateCourse;

PROCEDURE UpdateCourse(Course_Id in Course.CourseId%type,Course_Name in Course.CourseName%type,Program_Id in Course.ProgramId%type,Start_Date in Course.StartDate%type ,End_Date in Course.EndDate%type,Image_Path in Course.ImagePath%type,NumberSections in Course.NumberOfSections%type,CPreRequisite in Course.Prerequisite%type)
As

BEGIN

Update Course 

Set CourseName = Course_Name ,ProgramId=Program_Id,StartDate=Start_Date,EndDate=End_Date,ImagePath=Image_Path,NumberOfSections=NumberSections,Prerequisite=CPreRequisite

where CourseId = Course_Id;

commit;

End UpdateCourse;

PROCEDURE DeleteCourse(Course_Id IN NUMBER)

As

Begin

delete from course 

where CourseId = Course_Id;

commit;

End DeleteCourse;

 PROCEDURE GetNumberOfCourses 
AS
    c_all SYS_REFCURSOR;
BEGIN
    OPEN c_all FOR
        SELECT p.trackname, COUNT(*) AS numberOfCourses
        FROM course c
        JOIN program p ON c.programId = p.programId
        GROUP BY p.trackname;

    DBMS_SQL.RETURN_RESULT(c_all);
END GetNumberOfCourses;

PROCEDURE GetCourseIdByName(Course_Name IN Course.CourseName%TYPE, v_Course_Id OUT Course.CourseId%TYPE) AS
BEGIN
    SELECT CourseId INTO v_Course_Id
    FROM course
    WHERE CourseName = Course_Name;
END GetCourseIdByName;
PROCEDURE UPDATE_COURSE_IMAGE(COURSE_ID IN COURSE.COURSEID%TYPE,NEW_IMG IN COURSE.IMAGEPATH%TYPE)
AS
    BEGIN
    UPDATE COURSE SET
        IMAGEPATH = NEW_IMG
        WHERE COURSEID = COURSE_ID;
        COMMIT;
    END UPDATE_COURSE_IMAGE;
    
PROCEDURE GETCOURSECOUNT(COURSE_COUNT OUT NUMBER)
AS
BEGIN
SELECT COUNT(*) INTO COURSE_COUNT
FROM COURSE;
COMMIT;
END GETCOURSECOUNT;
 
 
PROCEDURE GetAllCoursesWithSectionsAndInstructors
AS
    all_courses SYS_REFCURSOR;
BEGIN
    OPEN all_courses FOR
        SELECT
            c.CourseId,
            c.CourseName,
            s.SectionName,
            u.UserId AS InstructorId,
            u.FirstName || ' ' || u.LastName AS InstructorName
        FROM
            Course c
            INNER JOIN Program p ON c.ProgramId = p.ProgramId
            INNER JOIN Section s ON c.CourseId = s.CourseId
            INNER JOIN Users u ON s.InstructorId = u.UserId
        ORDER BY
            c.CourseName, s.SectionName;
 
    DBMS_SQL.RETURN_RESULT(all_courses);
END GetAllCoursesWithSectionsAndInstructors;
 
PROCEDURE GetCoursesByInstructorId(Instructor_Id IN NUMBER)
AS
    Instructor_courses SYS_REFCURSOR;
BEGIN
    OPEN Instructor_courses FOR
        SELECT
            u.UserId AS InstructorId,
            u.FirstName || ' ' || u.LastName AS InstructorName,
            c.CourseId,
            c.CourseName,
            COUNT(s.SectionId) AS NumberOfSections
        FROM
            Course c
            JOIN Section s ON c.CourseId = s.CourseId
            JOIN Users u ON s.InstructorId = u.UserId
            JOIN Program p ON c.ProgramId = p.ProgramId
            JOIN Login l ON u.UserId = l.UserId
        WHERE
            l.RoleId = 2 AND
            u.UserId = Instructor_Id
        GROUP BY
            u.UserId,
            u.FirstName, 
            u.LastName, 
            c.CourseId,
            c.CourseName;
 
    DBMS_SQL.RETURN_RESULT(Instructor_courses);
END GetCoursesByInstructorId;
PROCEDURE GetInstructorCourseCount(Instructor_Id IN NUMBER, COURSE_COUNT OUT NUMBER)
AS
BEGIN
  SELECT COUNT(DISTINCT c.CourseId)
  INTO COURSE_COUNT
  FROM Course c
  JOIN Section s ON c.CourseId = s.CourseId
  JOIN Users u ON s.InstructorId = u.UserId
  WHERE u.UserId = Instructor_Id;
 
  COMMIT;
END GetInstructorCourseCount;
End Course_Package;

/
--------------------------------------------------------
--  DDL for Package Body CVS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CVS_PACKAGE" 
AS
PROCEDURE UploadCV(user_id IN CVs.UserID%type ,GH_Link IN CVs.GitHubLink%type,user_experience IN CVs.Experience%type,
                  u_gpa IN CVs.GPA%type, rate IN CVs.Rating%type, u_certificate IN CVs.Certificates%type ,u_Education IN CVs.Education%type,
                  u_major IN CVs.Major%type, u_projects IN CVs.Projects%type, u_interests IN CVs.Interests%type , LI_Link IN CVs.LINKEDINTLINK%type ,u_skills IN CVs.Skills%type , 
                  u_languages IN CVs.Languages%type, QrCode_url IN CVs.QRCodeUrl%type)
AS
BEGIN
INSERT INTO CVs (UserID, GitHubLink,Experience,GPA,Rating ,Certificates ,Education ,Major ,Projects,Interests,LINKEDINTLINK,Skills, Languages,QRCodeUrl ) 
VALUES (user_id, GH_Link, user_experience, u_gpa, rate, u_certificate, u_Education, u_major, u_projects , u_interests, LI_Link, u_skills, u_languages,QrCode_url );
COMMIT;
END UploadCV;

PROCEDURE UpdateCV(cv_id IN CVs.CVID%type, user_id IN CVs.UserID%type ,GH_Link IN CVs.GitHubLink%type,user_experience IN CVs.Experience%type,
                  u_gpa IN CVs.GPA%type, rate IN CVs.Rating%type, u_certificate IN CVs.Certificates%type ,u_Education IN CVs.Education%type,
                  u_major IN CVs.Major%type, u_projects IN CVs.Projects%type, u_interests IN CVs.Interests%type , LI_Link IN CVs.LINKEDINTLINK%type ,u_skills IN CVs.Skills%type , 
                  u_languages IN CVs.Languages%type, QrCode_url IN CVs.QRCodeUrl%type)
                  
AS
BEGIN
UPDATE CVS
SET
USERID = user_id,
GITHUBLINK = GH_Link, 
EXPERIENCE = user_experience,
GPA = u_gpa,
RATING = rate,
Certificates = u_certificate,
Education = u_Education,
Major = u_major,
Projects = u_projects,
Interests = u_interests,
LINKEDINTLINK = LI_Link,
Skills = u_skills,
Languages = u_languages,
QRCodeUrl = QrCode_url
WHERE 
CVID = cv_id;
COMMIT;

END UpdateCV;

PROCEDURE DeleteCV(cv_id IN CVs.CVID%type)
AS
BEGIN
DELETE FROM CVs WHERE CVID = cv_id;
COMMIT;
END DeleteCV;

PROCEDURE GetCVsByUser(user_id IN CVs.UserID%type)
AS
Get_Cur SYS_REFCURSOR;
BEGIN
OPEN Get_Cur FOR
SELECT * FROM CVs WHERE UserID = user_id;
DBMS_SQL.RETURN_RESULT(Get_Cur);
END GetCVsByUser;

PROCEDURE GetCVDetails(cv_id IN CVs.CVID%type)
AS
GetDetails_Cur SYS_REFCURSOR;
BEGIN
OPEN GetDetails_Cur FOR
SELECT * FROM CVs WHERE CVID = cv_id;
DBMS_SQL.RETURN_RESULT(GetDetails_Cur);
END GetCVDetails;

PROCEDURE GetCVByQrCode(QrCode_url IN CVs.QRCodeUrl%type)
AS
Get_Cur SYS_REFCURSOR;
BEGIN
OPEN Get_Cur FOR
SELECT * FROM CVs WHERE QRCodeUrl = QrCode_url;
DBMS_SQL.RETURN_RESULT(Get_Cur);
END GetCVByQrCode;

PROCEDURE GetAllCVs
AS
Get_Cur SYS_REFCURSOR;
BEGIN
OPEN Get_Cur FOR
SELECT * FROM CVs;
DBMS_SQL.RETURN_RESULT(Get_Cur);
END GetAllCVs;

PROCEDURE UpdateQrCode(user_id IN CVs.UserID%type, QrCode_url IN CVs.QRCodeUrl%type)
AS
BEGIN 
UPDATE CVs
set QRCodeUrl=QrCode_url
Where UserID=user_id;
commit;
end UpdateQrCode;
PROCEDURE GetUserInfo(user_id IN CVs.UserID%type)
AS
Get_Cur SYS_REFCURSOR;
BEGIN
OPEN Get_Cur FOR
SELECT
    u.FIRSTNAME,
    u.LASTNAME,
    u.ADDRESS,
    u.IMAGEPATH,
    u.PHONENUMBER,
    l.USERNAME
FROM
    USERS u
JOIN Login l ON u.USERID = l.USERID
WHERE
    u.USERID = user_id
FETCH FIRST ROW ONLY;


dbms_sql.return_result(Get_Cur);
END GetUserInfo;

PROCEDURE GetUserCvInfo(user_id IN CVs.UserID%type)
AS
Get_Cur SYS_REFCURSOR;
BEGIN
OPEN Get_Cur FOR
SELECT
    u.FIRSTNAME,
    u.LASTNAME,
    u.ADDRESS,
    u.PHONENUMBER,
    u.USERID,
    l.USERNAME,
    cv.CVID,
    cv.GitHubLink,
    cv.Experience,
    cv.GPA,
    cv.Education,
    cv.Major,
    cv.Projects,
    cv.Interests,
    cv.LINKEDINTLINK,
    cv.Skills,
    cv.Languages
FROM
    USERS u
JOIN CVS cv ON u.USERID = cv.USERID
JOIN Login l ON u.USERID = l.USERID
WHERE
    u.USERID = user_id
FETCH FIRST ROW ONLY;


dbms_sql.return_result(Get_Cur);
END GetUserCvInfo;

END CVs_Package;

/
--------------------------------------------------------
--  DDL for Package Body FEEDBACKPACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "FEEDBACKPACKAGE" AS

    PROCEDURE CreateFeedback(
        Feedback_Content IN Feedback.FeedbackContent%TYPE,
        Feedback_Rating IN Feedback.Rating%TYPE,
        Feedback_Date IN Feedback.FeedbackDate%TYPE DEFAULT SYSDATE,
        Section_ID IN Feedback.SectionID%TYPE
    ) AS
    BEGIN
        INSERT INTO Feedback VALUES (DEFAULT, Feedback_Content, Feedback_Rating, Feedback_Date, Section_ID);
        COMMIT;
    END CreateFeedback;

    PROCEDURE DeleteFeedback(Feedback_Id IN NUMBER) AS
    BEGIN
        DELETE FROM Feedback WHERE FeedbackId = Feedback_Id;
        COMMIT;
    END DeleteFeedback;


PROCEDURE GetAllFeedbacks AS
       allFeedback_cursor SYS_REFCURSOR;
   BEGIN
      OPEN allFeedback_cursor FOR
         SELECT * FROM Feedback;
      DBMS_SQL.RETURN_RESULT(allFeedback_cursor);
   END GetAllFeedbacks;


END FeedbackPackage;

/
--------------------------------------------------------
--  DDL for Package Body GRADES_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "GRADES_PACKAGE" AS

    PROCEDURE CreateGrade(p_grade IN Grades.STUDENTGRADE%TYPE, p_userid IN Grades.Userid%TYPE, p_assessmentid IN Grades.AssessmantID%TYPE, p_notes IN Grades.Notes%TYPE) IS
    BEGIN
        INSERT INTO Grades (STUDENTGRADE, Userid, AssessmantID, Notes)
        VALUES (p_grade, p_userid, p_assessmentid, p_notes);
    commit;
    END CreateGrade;

    PROCEDURE GetGradeById(p_gradeid IN Grades.GradeID%TYPE)
    IS
    Get_Cur SYS_REFCURSOR;
    BEGIN
    open Get_Cur for
        SELECT * FROM Grades
        WHERE GradeID = p_gradeid;
dbms_sql.return_result(Get_Cur);

    END GetGradeById;

    PROCEDURE GetGradeByUserId(User_Id IN Grades.UserId%TYPE)
    IS
    Get_Cur SYS_REFCURSOR;
    BEGIN
    open Get_Cur for
        SELECT g.studentgrade, a.title, c.coursename, u.firstname, u.lastname 
        FROM Users u
        JOIN StdSection ss ON u.USERID = ss.StudentId
                JOIN Section s ON ss.SectionID = s.SectionID
                JOIN Assessments a ON a.SectionID = s.SectionID
                LEFT JOIN Grades g ON u.USERID = g.Userid AND a.AssessmentID = g.ASSESSMANTID
                JOIN Course c ON c.COURSEID = s.COURSEID
        WHERE u.Userid = User_Id;
dbms_sql.return_result(Get_Cur);

end GetGradeByUserId;

PROCEDURE GetUserGrade(p_userid IN Grades.UserId%TYPE , p_assessmentid IN Grades.AssessmantID%TYPE)
IS
    Get_Cur SYS_REFCURSOR;
BEGIN
    OPEN Get_Cur FOR
        SELECT *
        FROM Grades g
        JOIN ASSESSMENTs a ON a.ASSESSMENTID= g.ASSESSMANTID
        WHERE UserID = p_userid AND AssessmantID = p_assessmentid;
 
    dbms_sql.return_result(Get_Cur);
END GetUserGrade;

    PROCEDURE UpdateGrade(p_grade IN Grades.STUDENTGRADE%TYPE, p_userid IN Grades.Userid%TYPE, p_assessmentid IN Grades.AssessmantID%TYPE) IS
    BEGIN
        UPDATE Grades
        SET STUDENTGRADE = p_grade,
            Userid = p_userid,
            AssessmantID = p_assessmentid
        WHERE 
            Userid = p_userid AND
            AssessmantID = p_assessmentid;
    END UpdateGrade;

    PROCEDURE DeleteGrade(p_gradeid IN Grades.GradeID%TYPE) IS
    BEGIN
        DELETE FROM Grades
        WHERE GradeID = p_gradeid;
    END DeleteGrade;

    PROCEDURE CalculateUserGrade(p_userid IN Grades.Userid%TYPE, p_final_grade OUT NUMBER) IS
        total NUMBER;
        pcount NUMBER;
    BEGIN
        SELECT SUM(STUDENTGRADE), COUNT(*)
        INTO total, pcount
        FROM Grades
        WHERE Userid = p_userid;

        IF pcount > 0 THEN
            p_final_grade := total / pcount;
        ELSE
            p_final_grade := NULL;
        END IF;
    END CalculateUserGrade;

PROCEDURE ConvertToLetterGrade(p_final_grade IN NUMBER, p_letter_grade OUT VARCHAR2) IS
BEGIN
    IF p_final_grade >= 90 THEN
        p_letter_grade := 'A+';
    ELSIF p_final_grade >= 85 THEN
        p_letter_grade := 'A';
    ELSIF p_final_grade >= 80 THEN
        p_letter_grade := 'A-';
    ELSIF p_final_grade >= 77 THEN
        p_letter_grade := 'B+';
    ELSIF p_final_grade >= 75 THEN
        p_letter_grade := 'B';
    ELSIF p_final_grade >= 70 THEN
        p_letter_grade := 'B-';
    ELSIF p_final_grade >= 67 THEN
        p_letter_grade := 'C+';
    ELSIF p_final_grade >= 65 THEN
        p_letter_grade := 'C';
    ELSIF p_final_grade >= 60 THEN
        p_letter_grade := 'C-';
    ELSIF p_final_grade >= 57 THEN
        p_letter_grade := 'D-';
    ELSIF p_final_grade >= 55 THEN
        p_letter_grade := 'D';
    ELSIF p_final_grade >= 50 THEN
        p_letter_grade := 'D-';
    ELSE
        p_letter_grade := 'F';
    END IF;
END ConvertToLetterGrade;



END Grades_Package;

/
--------------------------------------------------------
--  DDL for Package Body LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "LOGIN_PACKAGE" AS
    PROCEDURE GET_ALL_LOGINS AS
        CUR_ALL SYS_REFCURSOR;
    BEGIN
        OPEN CUR_ALL FOR 
        SELECT * FROM LOGIN;
        DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_ALL_LOGINS;

    PROCEDURE GET_LOGIN_BY_ID (ID IN NUMBER) AS
        CUR_LOGIN SYS_REFCURSOR; 
    BEGIN
        OPEN CUR_LOGIN FOR
        SELECT * FROM LOGIN
        WHERE LOGINID = ID ;
        DBMS_SQL.RETURN_RESULT(CUR_LOGIN);
    END GET_LOGIN_BY_ID;

    PROCEDURE CREATE_LOGIN(USERNAME IN LOGIN.USERNAME%TYPE,PASSWORD IN LOGIN.PASSWORD%TYPE,ROLEID IN LOGIN.ROLEID%TYPE,USERID IN LOGIN.USERID%TYPE) AS
    BEGIN
        INSERT INTO LOGIN VALUES (DEFAULT, USERNAME, PASSWORD, ROLEID, USERID);
        COMMIT;
    END CREATE_LOGIN;

    PROCEDURE UPDATE_LOGIN(LOGIN_ID IN LOGIN.LOGINID%TYPE,USER_NAME IN LOGIN.USERNAME%TYPE,PASSWORD_ IN LOGIN.PASSWORD%TYPE,ROLE_ID IN LOGIN.ROLEID%TYPE,USER_ID IN LOGIN.USERID%TYPE) AS
    BEGIN
        UPDATE LOGIN SET
        USERNAME = USER_NAME,
        PASSWORD = PASSWORD_,
        ROLEID = ROLE_ID,
        USERID = USER_ID
        WHERE LOGINID = LOGIN_ID;
        COMMIT;
    END UPDATE_LOGIN;

    PROCEDURE DELETE_LOGIN(LOGIN_ID IN LOGIN.LOGINID%TYPE) AS
    BEGIN
        DELETE FROM LOGIN 
        WHERE LOGINID = LOGIN_ID;
        COMMIT;
    END DELETE_LOGIN;

    PROCEDURE USER_LOGIN(USER_NAME IN LOGIN.USERNAME%TYPE, PASSWORD IN LOGIN.PASSWORD%TYPE)
    AS
    Get_Cur SYS_REFCURSOR;
    BEGIN
    OPEN Get_Cur FOR
    SELECT USERID, ROLEID
    FROM LOGIN
    WHERE USERNAME = USER_NAME 
    AND LOGIN.PASSWORD = PASSWORD;
    DBMS_SQL.RETURN_RESULT(Get_Cur);
    END USER_LOGIN ;

    PROCEDURE UPDATE_PASSWORD(LOGIN_ID IN LOGIN.USERID%TYPE,NEW_PASSWORD IN LOGIN.PASSWORD%TYPE)
        AS
    BEGIN
        UPDATE LOGIN SET
        PASSWORD = NEW_PASSWORD
        WHERE USERID = LOGIN_ID;
        COMMIT;
    END UPDATE_PASSWORD;

    PROCEDURE GetInstructorCount(
        instructor_count OUT NUMBER
    )
    AS
    BEGIN
        SELECT COUNT(*) INTO instructor_count
        FROM LOGIN l
        INNER JOIN ROLE r ON l.ROLEID = r.ROLEID
        WHERE r.ROLEID = 2
        AND r.ROLENAME = 'INSTRUCTOR';
    END GetInstructorCount;

PROCEDURE GET_INSTRUCTOR_COUNT(INSTRUCTOR_COUNT OUT NUMBER) AS
BEGIN
SELECT COUNT(*) INTO INSTRUCTOR_COUNT
    FROM LOGIN
    WHERE ROLEID = 2;
COMMIT;
END GET_INSTRUCTOR_COUNT;   
PROCEDURE GET_STUDENT_COUNT(STUDENT_COUNT OUT NUMBER) AS
    BEGIN
        SELECT COUNT(*) INTO STUDENT_COUNT
        FROM LOGIN
        WHERE ROLEID = 3;
 
        COMMIT;
    END GET_STUDENT_COUNT;
END LOGIN_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body MATERIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "MATERIAL_PACKAGE" 
AS
PROCEDURE AddMaterial(Material_Name IN Material.MaterialName%TYPE,Material_Path IN Material.MaterialPath%TYPE,Course_ID IN Material.CourseID%TYPE,Video_Url IN Material.VideoUrl%TYPE)
AS
BEGIN
INSERT INTO Material (MaterialName, MaterialPath, CourseID, VideoUrl)
VALUES (Material_Name, Material_Path, Course_ID, Video_Url);
COMMIT;
END AddMaterial;
PROCEDURE UpdateMaterial(Material_ID IN Material.MaterialID%TYPE, Material_Name IN Material.MaterialName%TYPE, Material_Path IN Material.MaterialPath%TYPE, Course_ID IN Material.CourseID%TYPE,Video_Url IN Material.VideoUrl%TYPE)
AS
BEGIN
UPDATE Material
SET MaterialName = Material_Name,
    MaterialPath = Material_Path,
    CourseID = Course_ID,
    VideoUrl = Video_Url
WHERE MaterialID = Material_ID;
COMMIT;
END UpdateMaterial;

PROCEDURE DeleteMaterial(Material_ID IN Material.MaterialID%TYPE)
AS
BEGIN
DELETE FROM Material WHERE MaterialID = Material_ID;
COMMIT;
END DeleteMaterial;

PROCEDURE GetMaterialByID(Material_ID IN Material.MaterialID%TYPE)
AS
GETMaterial_CUR SYS_REFCURSOR;
BEGIN
OPEN GETMaterial_CUR FOR
SELECT * FROM Material WHERE MaterialID = Material_ID;
DBMS_SQL.RETURN_RESULT(GETMaterial_CUR);
END GetMaterialByID;

PROCEDURE GetAllMaterials
AS
GetAll_CUR SYS_REFCURSOR;
BEGIN
OPEN GetAll_CUR FOR
SELECT * FROM Material;
DBMS_SQL.RETURN_RESULT(GetAll_CUR);
END GetAllMaterials;

PROCEDURE GetMaterialsByCourse(Course_ID IN Material.CourseID%TYPE)
AS
GetByCourse_CUR SYS_REFCURSOR;
BEGIN
OPEN GetByCourse_CUR FOR
SELECT * FROM Material WHERE CourseID = Course_ID
 Order By MaterialID;
DBMS_SQL.RETURN_RESULT(GetByCourse_CUR);
END GetMaterialsByCourse;

PROCEDURE GetLatestMaterials(NumMaterials IN NUMBER)
AS
GetLatest_CUR SYS_REFCURSOR;
BEGIN
OPEN GetLatest_CUR FOR
SELECT * FROM Material
ORDER BY MaterialID DESC
FETCH FIRST NumMaterials ROWS ONLY;
DBMS_SQL.RETURN_RESULT(GetLatest_CUR);
END GetLatestMaterials;
END Material_Package;

/
--------------------------------------------------------
--  DDL for Package Body NOTIFICATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "NOTIFICATION_PACKAGE" 

As 


PROCEDURE CreateNotification(Section_Id in Notifications.SectionId%type,Notification_Text in Notifications.NotificationText%type,Notification_StartDate in Notifications.NotificationStartDate%type DEFAULT SYSDATE ,Notification_EndDate in Notifications.NotificationEndDate%type)
As
Begin
insert into Notifications values (default ,Section_Id,Notification_Text,Notification_StartDate,Notification_EndDate);
commit;
End CreateNotification;

PROCEDURE UpdateNotification(Notification_Id in Notifications.NotificationId%type,Section_Id in Notifications.SectionId%type,Notification_Text in Notifications.NotificationText%type,Notification_StartDate in Notifications.NotificationStartDate%type DEFAULT SYSDATE ,Notification_EndDate in Notifications.NotificationEndDate%type )
As

BEGIN

Update Notifications 

Set SectionId = Section_Id,NotificationText=Notification_Text,NotificationStartDate=Notification_StartDate,NotificationEndDate=Notification_EndDate
where NotificationId = Notification_Id;

commit;

End UpdateNotification;





PROCEDURE DeleteNotification(Notification_Id IN NUMBER)
AS
BEGIN
DELETE from Notifications WHERE NotificationId =Notification_Id;
COMMIT;
END DeleteNotification;

 PROCEDURE GetNotificationsByDate AS
   notification_cursor SYS_REFCURSOR;
BEGIN
   OPEN notification_cursor FOR
      SELECT * FROM Notifications WHERE NotificationEndDate IS NULL OR NotificationEndDate > SYSDATE;
   DBMS_SQL.RETURN_RESULT(notification_cursor);
END GetNotificationsByDate;

PROCEDURE GetNotificationsBySection (Section_Id IN NOTIFICATIONS.SECTIONID%TYPE) AS
   notification_cursor SYS_REFCURSOR;
BEGIN
   OPEN notification_cursor FOR
      SELECT * FROM Notifications WHERE SECTIONID =  Section_Id
      Order By NOTIFICATIONSTARTDATE DESC;
   DBMS_SQL.RETURN_RESULT(notification_cursor);
END GetNotificationsBySection;

End Notification_Package;

/
--------------------------------------------------------
--  DDL for Package Body POLLOPTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "POLLOPTION_PACKAGE" 
AS
PROCEDURE AddPollOption(
    p_PollID IN PollOptions.PollID%TYPE,
    p_OptionText IN PollOptions.OptionText%TYPE
)
IS
BEGIN
    INSERT INTO PollOptions (PollID, OptionText)
    VALUES (p_PollID, p_OptionText);
    COMMIT;
END AddPollOption;

PROCEDURE UpdatePollOption(
    p_OptionID IN PollOptions.OptionID%TYPE,
    p_OptionText IN PollOptions.OptionText%TYPE
)
IS
BEGIN
    UPDATE PollOptions
    SET OptionText = p_OptionText
    WHERE OptionID = p_OptionID;
    COMMIT;
END UpdatePollOption;

PROCEDURE DeletePollOption(
    p_OptionID IN PollOptions.OptionID%TYPE
)
IS
BEGIN
    DELETE FROM PollOptions
    WHERE OptionID = p_OptionID;

    COMMIT;
END DeletePollOption;



PROCEDURE GetPollOptions(  p_PollID IN PollOptions.PollID%TYPE)
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM PollOptions
Where PollID = p_PollID;
dbms_sql.return_result(p_Records);
END GetPollOptions;
END PollOption_Package;

/
--------------------------------------------------------
--  DDL for Package Body POLLRESPONSE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "POLLRESPONSE_PACKAGE" 
AS
PROCEDURE SubmitPollResponse(
    P_PollID IN PollResponses.PollID%TYPE,
    P_UserID IN PollResponses.UserID%TYPE,
    P_OptionID IN PollResponses.OptionID%TYPE
)
IS
BEGIN
    INSERT INTO PollResponses (PollID, UserID, OptionID)
    VALUES (P_PollID, P_UserID, P_OptionID);
    COMMIT;
END SubmitPollResponse;

PROCEDURE UpdatePollResponse(
    P_PollResponseID IN PollResponses.PollResponseID%TYPE,
    P_OptionID IN PollResponses.OptionID%TYPE
)
IS
BEGIN
    UPDATE PollResponses
    SET OptionID = P_OptionID
    WHERE PollResponseID = P_PollResponseID;
    COMMIT;
END UpdatePollResponse;

PROCEDURE DeletePollResponse(P_PollResponseID IN PollResponses.PollResponseID%TYPE)
IS
BEGIN
    DELETE FROM PollResponses
    WHERE PollResponseID = P_PollResponseID;
    COMMIT;
END DeletePollResponse;

PROCEDURE GetAllResponsesForPoll (P_PollID IN PollResponses.PollID%TYPE)
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM PollResponses
Where PollID = P_PollID;
dbms_sql.return_result(p_Records);
END GetAllResponsesForPoll;



PROCEDURE GetUserPollResponses(P_UserID IN PollResponses.UserID%TYPE)
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM PollResponses
Where UserID = P_UserID;
dbms_sql.return_result(p_Records);
END GetUserPollResponses;

END PollResponse_Package;

/
--------------------------------------------------------
--  DDL for Package Body POLL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "POLL_PACKAGE" 
AS

PROCEDURE CreatePoll(
    p_Title IN Polls.Title%TYPE,
    p_Description IN Polls.Description%TYPE,
    p_StartDate IN Polls.StartDate%TYPE,
    p_EndDate IN Polls.EndDate%TYPE,
    p_Section IN Polls.SECTIONID%TYPE
)
IS
BEGIN
    INSERT INTO Polls ( Title, Description, StartDate, EndDate, SECTIONID)
    VALUES (p_Title, p_Description, p_StartDate, p_EndDate, p_Section);
    COMMIT;
END CreatePoll;



PROCEDURE UpdatePoll(
    p_PollID IN Polls.PollID%TYPE,
    p_Title IN Polls.Title%TYPE,
    p_Description IN Polls.Description%TYPE,
    p_StartDate IN Polls.StartDate%TYPE,
    p_EndDate IN Polls.EndDate%TYPE,
        p_Section IN Polls.SECTIONID%type
    
)
IS
BEGIN
    UPDATE Polls
    SET   Title = p_Title,
        Description = p_Description,
        StartDate = p_StartDate,
        EndDate = p_EndDate,
        SECTIONID = p_Section
    WHERE PollID = p_PollID;
    COMMIT;
END UpdatePoll;



PROCEDURE DeletePoll(p_PollID IN Polls.PollID%TYPE)
IS
BEGIN
    DELETE FROM Polls
    WHERE PollID = p_PollID;
    COMMIT;
END DeletePoll;



PROCEDURE GetPollByID(p_PollID IN Polls.PollID%TYPE)
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM Polls
Where PollID = p_PollID;
dbms_sql.return_result(p_Records);
END GetPollByID;

PROCEDURE GetAllPolls
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM Polls;
dbms_sql.return_result(p_Records);
END GetAllPolls;
END Poll_Package ;

/
--------------------------------------------------------
--  DDL for Package Body PROGRAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PROGRAM_PACKAGE" 
as
PROCEDURE CreateProgram(
    p_TrackName IN VARCHAR2,
    p_ImagePath IN VARCHAR2,
    p_Description IN VARCHAR2,
    p_ProgramPeriod IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Program(TrackName, ImagePath, Description, ProgramPeriod)
    VALUES (p_TrackName, p_ImagePath, p_Description, p_ProgramPeriod);
    COMMIT;
END CreateProgram;
procedure GetAllPrograms
as
Get_Cur SYS_REFCURSOR ;
Begin
open Get_Cur for 
select * from Program p
inner join course c
on p.programid = c.programid;
dbms_sql.return_result(Get_Cur);
end  GetAllPrograms;


procedure GetAdminPrograms
as
Get_Cur SYS_REFCURSOR ;
Begin
open Get_Cur for 
select * from Program p
Order By p.programid;
dbms_sql.return_result(Get_Cur);
end  GetAdminPrograms;


procedure GetProgramByID(p_ProgramID IN NUMBER)
as
Get_Cur SYS_REFCURSOR ;
Begin
open Get_Cur for 
select * from Program where ProgramID = p_ProgramID;
dbms_sql.return_result(Get_Cur);
end  GetProgramByID;

PROCEDURE UpdateProgram(
    p_ProgramID IN NUMBER,
    p_TrackName IN VARCHAR2,
    p_ImagePath IN VARCHAR2,
    p_Description IN VARCHAR2,
    p_ProgramPeriod IN VARCHAR2
)
AS
BEGIN
    UPDATE Program
    SET TrackName = p_TrackName,
        ImagePath = p_ImagePath,
        Description = p_Description,
        ProgramPeriod = p_ProgramPeriod
    WHERE ProgramID = p_ProgramID;
    COMMIT;
END UpdateProgram;
PROCEDURE DeleteProgram(
    p_ProgramID IN NUMBER
)
AS
BEGIN
    DELETE FROM Program WHERE ProgramID = p_ProgramID;
    COMMIT;
END DeleteProgram;

PROCEDURE GET_STUDENT_PROGRAM(
        USER_ID IN USERS.USERID%TYPE
    ) IS
        v_result_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_result_cursor FOR
            SELECT
               p.PROGRAMID AS ProgramID, p.TRACKNAME AS TrackName,p.DESCRIPTION AS Description,
               p.PROGRAMPERIOD AS ProgramPeriod, c.COURSEID AS CourseID, c.COURSENAME AS CourseName,
               c.STARTDATE AS StartDate, c.ENDDATE AS EndDate, c.IMAGEPATH, c.NUMBEROFSECTIONS AS NumberOfSections,  
               c.PREREQUISITE AS Prerequisite, s.SectionID
            FROM
                USERS u
                JOIN StdSection ss ON u.USERID = ss.StudentId
                JOIN Section s ON ss.SectionID = s.SectionID
                JOIN Course c ON c.COURSEID = s.COURSEID
                JOIN Program p ON p.programid = c.programid
            WHERE
                u.USERID = USER_ID
                
            Order By COURSEID;

       dbms_sql.return_result(v_result_cursor);
    END GET_STUDENT_PROGRAM;
            PROCEDURE UPDATE_PROGRAM_IMAGE(
        PROGRAM_ID IN PROGRAM.PROGRAMID%TYPE,
        NEW_IMG IN PROGRAM.IMAGEPATH%TYPE
    )
     AS
    BEGIN
    UPDATE PROGRAM SET
        IMAGEPATH = NEW_IMG
        WHERE PROGRAMID = PROGRAM_ID;
        COMMIT;
    END UPDATE_PROGRAM_IMAGE;
    PROCEDURE GetProgramStudentCount
    AS
        v_result_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_result_cursor FOR
            SELECT
                p.PROGRAMID AS ProgramID,
                p.TRACKNAME AS TrackName,
                COUNT(DISTINCT u.USERID) AS StudentCount
            FROM
                Program p
                LEFT JOIN Course c ON c.PROGRAMID = p.PROGRAMID
                LEFT JOIN Section s ON s.COURSEID = c.COURSEID
                LEFT JOIN StdSection ss ON ss.SectionID = s.SectionID
                LEFT JOIN USERS u ON u.USERID = ss.StudentId
            GROUP BY
                p.PROGRAMID, p.TRACKNAME
            ORDER BY
                p.PROGRAMID;
 
        dbms_sql.return_result(v_result_cursor);
    END GetProgramStudentCount;
end Program_Package;

/
--------------------------------------------------------
--  DDL for Package Body QUESTIONS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "QUESTIONS_PACKAGE" 
AS
PROCEDURE CreateQuestion (
    p_QuestionText IN Questions.QuestionText%TYPE,
    p_Marks IN Questions.Marks%TYPE,
    p_AssessmentID IN Questions.AssessmentID%TYPE
) AS
BEGIN
    INSERT INTO Questions (QuestionText, Marks, AssessmentID)
    VALUES (p_QuestionText, p_Marks, p_AssessmentID);
END CreateQuestion;

PROCEDURE GetQuestionByID ( p_QuestionID IN Questions.QuestionID%TYPE)
AS
    p_Record SYS_REFCURSOR;
BEGIN
    OPEN p_Record FOR
        SELECT * FROM Questions
        WHERE QuestionID = p_QuestionID;
dbms_sql.return_result(p_Record);

END GetQuestionByID;
PROCEDURE UpdateQuestion (
    p_QuestionID IN Questions.QuestionID%TYPE,
    p_QuestionText IN Questions.QuestionText%TYPE,
    p_Marks IN Questions.Marks%TYPE,
    p_AssessmentID IN Questions.AssessmentID%TYPE
) AS
BEGIN
    UPDATE Questions
    SET QuestionText = p_QuestionText,
        Marks = p_Marks,
        AssessmentID = p_AssessmentID
    WHERE QuestionID = p_QuestionID;
END UpdateQuestion;

PROCEDURE DeleteQuestion (
    p_QuestionID IN Questions.QuestionID%TYPE
) AS
BEGIN
    DELETE FROM Questions
    WHERE QuestionID = p_QuestionID;
END DeleteQuestion;
PROCEDURE ListQuestionsByAssessment (p_AssessmentID IN Questions.AssessmentID%TYPE)
AS
  p_Records SYS_REFCURSOR;
BEGIN
    OPEN p_Records FOR
        SELECT * FROM Questions
        WHERE AssessmentID = p_AssessmentID;
dbms_sql.return_result(p_Records);
END ListQuestionsByAssessment;

PROCEDURE UpdateQuestionMarks (
    p_QuestionID IN Questions.QuestionID%TYPE,
    p_NewMarks IN Questions.Marks%TYPE
) AS
BEGIN
    UPDATE Questions
    SET Marks = p_NewMarks
    WHERE QuestionID = p_QuestionID;
END UpdateQuestionMarks;
END Questions_Package ; 

/
--------------------------------------------------------
--  DDL for Package Body REVIEWINSTRUCTOR_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "REVIEWINSTRUCTOR_PACKAGE" AS
    PROCEDURE CreateReview(
        Review_Content IN ReviewInstructor.ReviewContent%TYPE,
        Review_Rating IN ReviewInstructor.Rating%TYPE,
        Review_Date IN ReviewInstructor.ReviewDate%TYPE DEFAULT SYSDATE,
        Section_ID IN ReviewInstructor.SectionID%TYPE
    ) AS
    BEGIN
        INSERT INTO ReviewInstructor VALUES (DEFAULT, Review_Content, Review_Rating, Review_Date, Section_ID);
        COMMIT;
    END CreateReview;

    PROCEDURE DeleteReview(Review_Id IN NUMBER) AS
    BEGIN
        DELETE FROM ReviewInstructor WHERE ReviewId = Review_Id;
        COMMIT;
    END DeleteReview;

    PROCEDURE GetAllReviews AS
        allReview_cursor SYS_REFCURSOR;
    BEGIN
        OPEN allReview_cursor FOR
            SELECT * FROM ReviewInstructor;
        DBMS_SQL.RETURN_RESULT(allReview_cursor);
    END GetAllReviews;

    PROCEDURE GetLastThreeHighRatedReviews AS
        review_cursor SYS_REFCURSOR;
    BEGIN
        OPEN review_cursor FOR
            SELECT * FROM (SELECT * FROM ReviewInstructor ORDER BY Rating DESC) WHERE ROWNUM <= 3;
        DBMS_SQL.RETURN_RESULT(review_cursor);
    END GetLastThreeHighRatedReviews;
END ReviewInstructor_Package;

/
--------------------------------------------------------
--  DDL for Package Body ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ROLE_PACKAGE" 
AS

PROCEDURE GET_ALL_ROLES
AS
CUR_ALL SYS_REFCURSOR;
BEGIN
OPEN CUR_ALL FOR 
SELECT * FROM ROLE ;
DBMS_SQL.RETURN_RESULT(CUR_ALL);
END GET_ALL_ROLES ;

PROCEDURE GET_ROLE_BY_ID (ID IN NUMBER)
AS
CUR_ALL SYS_REFCURSOR; 
BEGIN
OPEN CUR_ALL FOR
SELECT * FROM ROLE
WHERE ROLEID = ID ;
DBMS_SQL.RETURN_RESULT(CUR_ALL);
END GET_ROLE_BY_ID;

PROCEDURE CREATE_ROLE(ROLE_NAME IN ROLE.ROLENAME%TYPE)
AS
BEGIN
INSERT INTO ROLE VALUES (DEFAULT, ROLE_NAME);
COMMIT;
END CREATE_ROLE;

PROCEDURE UPDATE_ROLE(ROLE_ID IN ROLE.ROLEID%TYPE, ROLE_NAME IN ROLE.ROLENAME%TYPE)
AS
BEGIN
UPDATE ROLE SET
ROLENAME = ROLE_NAME
WHERE ROLEID = ROLE_ID;
COMMIT;
END UPDATE_ROLE;

PROCEDURE DELETE_ROLE(ROLE_ID IN ROLE.ROLEID%TYPE)
AS
BEGIN
DELETE FROM ROLE 
WHERE ROLEID = ROLE_ID;
COMMIT;
END DELETE_ROLE;

END ROLE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body SECTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "SECTION_PACKAGE" 

As 

PROCEDURE GETALLSections

AS

All_sections SYS_REFCURSOR;

BEGIN

OPEN All_sections FOR

SELECT * FROM Section;

DBMS_SQL.RETURN_RESULT(All_sections);

End GetAllSections;

PROCEDURE GetSectionById(Section_Id IN NUMBER, User_Id IN NUMBER)
As
  Get_section SYS_REFCURSOR;
Begin
  open Get_section for
    SELECT
      ss.SectionID, s.sectionname, s.timelecture, s.meetinglink, s.instructorid, s.lecturedays, s.courseid, 
      a.attendanceid, a.dateofattendance, a.status
    FROM
      USERS u
      JOIN StdSection ss ON u.USERID = ss.StudentId
      JOIN Section s ON ss.SectionID = s.SectionID
      JOIN Course c ON c.COURSEID = s.COURSEID
      JOIN Attendance a ON a.userid = u.USERID
    WHERE
      u.USERID = USER_ID
      AND ss.SECTIONID = Section_Id
      AND a.SECTIONID = Section_Id -- Additional condition to filter by section ID
    ORDER BY COURSEID;

  dbms_sql.return_result(Get_section);
End GetSectionById;

PROCEDURE GetSectionInfo(Section_Id IN NUMBER)
As
  Get_section SYS_REFCURSOR;
Begin
  open Get_section for
    SELECT
      *
    FROM
      SECTION
    WHERE SECTIONID = Section_Id;

  dbms_sql.return_result(Get_section);
End GetSectionInfo;

PROCEDURE GetSectionByCourseId(Course_Id IN NUMBER)
As
  Get_section SYS_REFCURSOR;
Begin
  open Get_section for
    SELECT * 
    FROM Section s
    WHERE
      s.courseid = Course_Id
    ORDER BY Sectionid;

  dbms_sql.return_result(Get_section);
End GetSectionByCourseId;

PROCEDURE CreateSection(Section_Name in Section.SectionName%type,Time_Lecture in Section.TimeLecture%type,Meeting_Link in Section.MeetingLink %type ,Course_Id in Section.CourseId%type,Instructor_Id in Section.InstructorId%type,Lecture_Days in Section.LectureDays%type,Image_Path in Section.ImagePath%type)
As

Begin

insert into Section values (default ,Section_Name,Time_Lecture,Meeting_Link,Course_Id,Instructor_Id ,Lecture_Days,Image_Path);

commit;

End CreateSection;

PROCEDURE UpdateSection(Section_Id in Section.SectionId%type,Section_Name in Section.SectionName%type,Time_Lecture in Section.TimeLecture%type,Meeting_Link in Section.MeetingLink %type ,Course_Id in Section.CourseId%type,Instructor_Id in Section.InstructorId%type,Lecture_Days in Section.LectureDays%type,Image_Path in Section.ImagePath%type)
As

BEGIN

Update Section

Set SectionName=Section_Name,TimeLecture=Time_Lecture,MeetingLink=Meeting_Link,CourseId=Course_Id,InstructorId=Instructor_Id,LectureDays=Lecture_Days,ImagePath=Image_Path

where SectionId = Section_Id;

commit;

End UpdateSection;

PROCEDURE  DeleteSection(Section_Id IN NUMBER)

As

Begin

delete from section 

where SectionId = Section_Id;

commit;

End DeleteSection;

PROCEDURE GetCourseBySectionId(Section_Id IN NUMBER)
As
 Get_section SYS_REFCURSOR;
Begin
  open Get_section for
        SELECT c.startdate as startdate, c.enddate as enddate
    FROM course c
    JOIN Section s ON c.courseid = s.courseid
    WHERE s.sectionid = Section_Id;

  dbms_sql.return_result(Get_section);
  END GetCourseBySectionId;
 
PROCEDURE GetInstructorSections(Instructor_Id IN NUMBER)
As
 Get_section SYS_REFCURSOR;
Begin
  open Get_section for
    SELECT S.* , C.COURSENAME
    FROM SECTION S
    JOIN COURSE C
    ON S.COURSEID = C.COURSEID
    WHERE S.INSTRUCTORID = Instructor_Id;

  dbms_sql.return_result(Get_section);
END GetInstructorSections;
 
PROCEDURE GETSECTIONCOUNT(SECTION_COUNT OUT NUMBER)
AS
BEGIN
SELECT COUNT(*) INTO SECTION_COUNT
FROM SECTION;
COMMIT;
END GETSECTIONCOUNT;
 
 
PROCEDURE GETINSTRUCTORSECTIONCOUNT(INSTRUCTOR_ID IN NUMBER, SECTION_COUNT OUT NUMBER)
AS
BEGIN
  SELECT COUNT(*)
  INTO SECTION_COUNT
  FROM SECTION S
  JOIN Login L ON S.INSTRUCTORID = L.USERID
  WHERE L.ROLEID = 2 AND L.USERID = INSTRUCTOR_ID;
 
  COMMIT;
END GETINSTRUCTORSECTIONCOUNT;
  
End Section_Package;

/
--------------------------------------------------------
--  DDL for Package Body SLIDER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "SLIDER_PACKAGE" 
AS
PROCEDURE InsertSlider(image_path IN Slider.ImagePath%type)
AS
BEGIN
INSERT INTO Slider VALUES (default, image_path);
COMMIT;
END InsertSlider;

PROCEDURE UpdateSlider(slider_id IN Slider.SliderID%type, image_path IN Slider.ImagePath%type)
AS
BEGIN
UPDATE Slider SET ImagePath = image_path WHERE SliderID = slider_id;
COMMIT;
END UpdateSlider;

PROCEDURE DeleteSlider(slider_id IN Slider.SliderID%type)
AS
BEGIN
DELETE FROM Slider WHERE SliderID = slider_id;
COMMIT;
END DeleteSlider;

PROCEDURE GetSliderByID(slider_id IN Slider.SliderID%type)
AS
GetById_Cur sys_refcursor;
BEGIN
open GetById_Cur for 
SELECT * FROM Slider WHERE SliderID = slider_id;
DBMS_SQL.RETURN_RESULT(GetById_Cur);

END GetSliderByID;

PROCEDURE GetAllSliders
AS
GetAll_Cur sys_refcursor;
BEGIN
open GetAll_Cur for 
SELECT * FROM Slider;
DBMS_SQL.RETURN_RESULT(GetAll_Cur);

END GetAllSliders;
END Slider_Package;

/
--------------------------------------------------------
--  DDL for Package Body STD_SECTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "STD_SECTION_PACKAGE" AS
    PROCEDURE GET_ALL_STD_SECTIONS AS
        CUR_ALL SYS_REFCURSOR;
    BEGIN
        OPEN CUR_ALL FOR
            SELECT * FROM StdSection;
        DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_ALL_STD_SECTIONS;

    PROCEDURE GET_STD_SECTION_BY_ID(STD_SECTION_ID IN NUMBER) AS
        CUR_STD_SECTION SYS_REFCURSOR;
    BEGIN
        OPEN CUR_STD_SECTION FOR
            SELECT * FROM StdSection
            WHERE StdSectionId = STD_SECTION_ID;
        DBMS_SQL.RETURN_RESULT(CUR_STD_SECTION);
    END GET_STD_SECTION_BY_ID;

    PROCEDURE GET_STD_SECTIONS_BY_SECTION_ID(SECTION_ID IN NUMBER) AS
        CUR_STD_SECTIONS SYS_REFCURSOR;
    BEGIN
        OPEN CUR_STD_SECTIONS FOR
            SELECT * FROM StdSection
            WHERE SectionID = SECTION_ID;
        DBMS_SQL.RETURN_RESULT(CUR_STD_SECTIONS);
    END GET_STD_SECTIONS_BY_SECTION_ID;

    PROCEDURE CREATE_STD_SECTION(SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER) AS
    BEGIN
        INSERT INTO StdSection (SectionID, StudentId)
        VALUES (SECTION_ID, STUDENT_ID);
        COMMIT;
    END CREATE_STD_SECTION;

    PROCEDURE UPDATE_STD_SECTION(STD_SECTION_ID IN NUMBER, SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER) AS
    BEGIN
        UPDATE StdSection
        SET SectionID = SECTION_ID,
            StudentId = STUDENT_ID
        WHERE StdSectionId = STD_SECTION_ID;
        COMMIT;
    END UPDATE_STD_SECTION;

    PROCEDURE DELETE_STD_SECTION(STD_SECTION_ID IN NUMBER) AS
    BEGIN
        DELETE FROM StdSection
        WHERE StdSectionId = STD_SECTION_ID;
        COMMIT;
    END DELETE_STD_SECTION;


    
    PROCEDURE GET_STD_SECTION_INFO
    AS
    CUR_ALL SYS_REFCURSOR;
    BEGIN
    OPEN CUR_ALL FOR 
    SELECT
        COURSE.COURSENAME,
        SECTION.SECTIONNAME,
        USERS.FIRSTNAME,
        USERS.LASTNAME,
        USERS.IMAGEPATH,
        USERS.PHONENUMBER,
        USERS.ADDRESS,
        USERS.REGISTRATIONDATE
    FROM
        USERS
    JOIN STDSECTION ON USERS.USERID = STDSECTION.STUDENTID
    JOIN SECTION ON STDSECTION.SECTIONID = SECTION.SECTIONID
    JOIN COURSE ON SECTION.COURSEID = COURSE.COURSEID
    GROUP BY
        COURSE.COURSENAME,
        SECTION.SECTIONNAME,
        USERS.FIRSTNAME,
        USERS.LASTNAME,
        USERS.IMAGEPATH,
        USERS.PHONENUMBER,
        USERS.ADDRESS,
        USERS.REGISTRATIONDATE;
    DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_STD_SECTION_INFO;
    
    
PROCEDURE GET_STD_SECTION_INFO_BY_SECTION_ID(SECTION_ID IN NUMBER)
AS
    CUR_ALL SYS_REFCURSOR;
BEGIN
    OPEN CUR_ALL FOR 
    SELECT
        USERS.USERID,
        COURSE.COURSENAME,
        SECTION.SECTIONNAME,
        SECTION.SECTIONID,
        USERS.FIRSTNAME,
        USERS.LASTNAME,
        USERS.IMAGEPATH,
        LOGIN.USERNAME,
        SUM(Grades.STUDENTGRADE) AS totalgrade
 
    FROM
        USERS
        JOIN STDSECTION ON USERS.USERID = STDSECTION.STUDENTID
        JOIN SECTION ON STDSECTION.SECTIONID = SECTION.SECTIONID
        JOIN LOGIN ON USERS.USERID = LOGIN.USERID 
        JOIN COURSE ON SECTION.COURSEID = COURSE.COURSEID
        JOIN Assessments ON Assessments.SectionID = SECTION.SectionID
        LEFT JOIN Grades ON USERS.USERID = Grades.UserID AND Assessments.AssessmentID = Grades.AssessmantID
 
    WHERE STDSECTION.SECTIONID = SECTION_ID
    GROUP BY
        USERS.USERID,
        COURSE.COURSENAME,
        SECTION.SECTIONNAME,
        SECTION.SECTIONID,
        USERS.FIRSTNAME,
        USERS.LASTNAME,
        USERS.IMAGEPATH,
        LOGIN.USERNAME;
 
    DBMS_SQL.RETURN_RESULT(CUR_ALL);
END GET_STD_SECTION_INFO_BY_SECTION_ID;
    
PROCEDURE GET_STD_SECTION_BY_SECTION_ID (
    SECTION_ID IN NUMBER,
    ASSESSMENT_ID IN NUMBER
)
AS
    CUR_ALL SYS_REFCURSOR;
BEGIN
    OPEN CUR_ALL FOR
        SELECT
            USERS.FIRSTNAME,
            USERS.LASTNAME,
            USERS.USERID,
            ASSESSMENTS.TITLE,
            MAX(USERSOLUTION.USERSOLUTIONTEXT) AS USERSOLUTIONTEXT,
            MAX(USERSOLUTION.ATTEMPTDATE) AS ATTEMPTDATE,
            MAX(GRADES.STUDENTGRADE) AS STUDENTGRADE
        FROM
            USERS
        JOIN STDSECTION ON USERS.USERID = STDSECTION.STUDENTID
        JOIN SECTION ON STDSECTION.SECTIONID = SECTION.SECTIONID
        JOIN ASSESSMENTS ON ASSESSMENTS.SECTIONID = SECTION.SECTIONID
        LEFT JOIN USERSOLUTION ON ASSESSMENTS.ASSESSMENTID = USERSOLUTION.ASSESSMENTID
                                   AND USERS.USERID = USERSOLUTION.USERID
        LEFT JOIN GRADES ON ASSESSMENTS.ASSESSMENTID = GRADES.ASSESSMANTID
                          AND USERS.USERID = GRADES.USERID
        WHERE
            STDSECTION.SECTIONID = SECTION_ID
            AND ASSESSMENTS.ASSESSMENTID = ASSESSMENT_ID
        GROUP BY
            USERS.FIRSTNAME,
            USERS.LASTNAME,
            USERS.USERID,
            ASSESSMENTS.TITLE
        ORDER BY
            MAX(USERSOLUTION.ATTEMPTDATE);

    DBMS_SQL.RETURN_RESULT(CUR_ALL);
END GET_STD_SECTION_BY_SECTION_ID;

    
      PROCEDURE GET_USER_SECTION(student_id  IN USERS.userid%type)
IS
  v_result_cursor SYS_REFCURSOR;
BEGIN
  OPEN v_result_cursor FOR
        SELECT s.SECTIONNAME, s.IMAGEPATH, s.TIMELECTURE, s.MEETINGLINK, 
           s.LECTUREDAYS, c.COURSENAME
    FROM USERS u
    JOIN STDSECTION ss ON u.USERID = ss.STUDENTID
    JOIN SECTION s ON ss.SECTIONID = s.SECTIONID
    JOIN COURSE c ON s.COURSEID = c.COURSEID
    where u.USERID  =student_id ;
  DBMS_SQL.RETURN_RESULT(v_result_cursor);
END GET_USER_SECTION;

PROCEDURE SET_FLAG(SECTION_ID IN NUMBER, STUDENT_ID IN NUMBER) AS
    BEGIN
        UPDATE StdSection
        SET FLAG = 1
        WHERE SECTIONID = SECTION_ID
        AND STUDENTID = STUDENT_ID;
        COMMIT;
    END SET_FLAG;
PROCEDURE LIST_STUDENT_GRADES (
    ASSESSMENT_ID IN ASSESSMENTS.ASSESSMENTID%TYPE
)
AS
    v_result_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_result_cursor FOR
        SELECT DISTINCT U.FIRSTNAME, U.LASTNAME, G.STUDENTGRADE
        FROM USERS U
        JOIN STDSECTION S ON U.USERID = S.STUDENTID
        LEFT JOIN GRADES G ON (U.USERID = G.USERID AND G.ASSESSMANTID = ASSESSMENT_ID)
        WHERE S.SECTIONID = (SELECT SECTIONID FROM ASSESSMENTS WHERE ASSESSMENTID = ASSESSMENT_ID)
        ORDER BY U.LASTNAME, U.FIRSTNAME;

    DBMS_SQL.RETURN_RESULT(v_result_cursor);
END LIST_STUDENT_GRADES;

PROCEDURE GetCertificateURL(
    pUserId IN Certificates.USERID%TYPE,
    pSectionId IN Section.SectionID%TYPE
)
AS
pCertificateCur SYS_REFCURSOR;
BEGIN
    OPEN pCertificateCur FOR
    SELECT CERTIFICATECLOUDINARYURL
    FROM Certificates
    WHERE USERID = pUserId
      AND EXISTS (
        SELECT 1
        FROM Section
        WHERE Section.SectionID = pSectionId
          AND Section.CourseID = Certificates.CourseID
      );
       DBMS_SQL.RETURN_RESULT(pCertificateCur);
END GetCertificateURL;
PROCEDURE GET_STUDENTS_INFO_BY_SECTION(SECTION_ID IN NUMBER) AS
    CUR_STD_SECTIONS SYS_REFCURSOR;
BEGIN
    OPEN CUR_STD_SECTIONS FOR
        SELECT
            U.FIRSTNAME,
            U.LASTNAME,
            U.IMAGEPATH,
            L.USERNAME,
            S.STUDENTID,
            S.SECTIONID,
            A.DATEOFATTENDANCE,
            A.STATUS
        FROM USERS U
        JOIN LOGIN L ON U.USERID = L.USERID
        JOIN STDSECTION S ON U.USERID = S.STUDENTID
        LEFT JOIN ATTENDANCE A ON U.USERID = A.USERID AND S.SECTIONID = A.SECTIONID
        WHERE S.SECTIONID = SECTION_ID;
 
    DBMS_SQL.RETURN_RESULT(CUR_STD_SECTIONS);
END GET_STUDENTS_INFO_BY_SECTION;
END STD_SECTION_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body STUDENT_GRADE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "STUDENT_GRADE_PACKAGE" AS
    PROCEDURE GET_STUDENT_GRADE_INFO(
        USER_ID IN USERS.USERID%TYPE,
        SECTION_ID IN Section.SectionID%TYPE
    ) IS
        v_result_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_result_cursor FOR
            SELECT
                u.USERID,
                u.FIRSTNAME,
                u.LASTNAME,
                c.CourseName,
                cv.QRCODEURL,
                SUM(g.STUDENTGRADE) OVER () AS totalgrade,
                ss.flag
            FROM
                USERS u
                JOIN CVS cv ON u.USERID = cv.USERID
                JOIN StdSection ss ON u.USERID = ss.StudentId
                JOIN Section s ON ss.SectionID = s.SectionID
                JOIN Assessments a ON a.SectionID = s.SectionID
                LEFT JOIN Grades g ON u.USERID = g.Userid AND a.AssessmentID = g.ASSESSMANTID
                JOIN Course c ON c.COURSEID = s.COURSEID
            WHERE
                u.USERID = USER_ID
                AND s.SectionID = SECTION_ID
                FETCH FIRST ROW ONLY;

       dbms_sql.return_result(v_result_cursor);
    END GET_STUDENT_GRADE_INFO;
END STUDENT_GRADE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body TESTIMONIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "TESTIMONIAL_PACKAGE" 

As 


PROCEDURE CreateTestimonial(Testimonial_Text in Testimonial.TestimonialText%type,Testimonial_Date in Testimonial.TestimonialDate%type DEFAULT SYSDATE,Testimonial_Status in Testimonial.TestimonialStatus%type DEFAULT 0,User_Id in Testimonial.USERID%type)
As
Begin
insert into Testimonial values (default ,Testimonial_Text,Testimonial_Date,Testimonial_Status,User_Id);
commit;
End CreateTestimonial;

PROCEDURE UpdateTestimonialStatus(Testimonial_Id in Testimonial.TestimonialId%type,Testimonial_Status in Testimonial.TestimonialStatus%type )
As

BEGIN

Update Testimonial 

Set TestimonialStatus = Testimonial_Status
where TestimonialId = Testimonial_Id;

commit;

End UpdateTestimonialStatus;



PROCEDURE DeleteTestimonial(Testimonial_Id IN NUMBER)
AS
BEGIN
DELETE from Testimonial WHERE TestimonialId =Testimonial_Id;
COMMIT;
END DeleteTestimonial;


PROCEDURE GetAllTestimonials AS
       allTestimonial_cursor SYS_REFCURSOR;
   BEGIN
      OPEN allTestimonial_cursor FOR
         SELECT * FROM Testimonial;
      DBMS_SQL.RETURN_RESULT(allTestimonial_cursor);
   END GetAllTestimonials;

   PROCEDURE GetTestimonialsByStatus
AS
    testimonial_cursor SYS_REFCURSOR;
BEGIN
    OPEN testimonial_cursor FOR
        SELECT * FROM Testimonial WHERE TestimonialStatus = 1;

    DBMS_SQL.RETURN_RESULT(testimonial_cursor);
END GetTestimonialsByStatus;

End Testimonial_Package;

/
--------------------------------------------------------
--  DDL for Package Body USERSOLUTIONS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USERSOLUTIONS_PACKAGE" 
AS
PROCEDURE AddUserSolution (
    p_UserID IN UserSolution.UserID%TYPE,
    p_AssessmentID IN UserSolution.AssessmentID%TYPE,
    p_QuestionID IN UserSolution.QuestionID%TYPE,
    p_AnswerID IN UserSolution.AnswerID %TYPE,
    p_UserSolution IN UserSolution.UserSolutionText%TYPE,
    p_AttemptDate IN UserSolution.AttemptDate%TYPE
)
IS
BEGIN
    INSERT INTO UserSolution (UserID, AssessmentID, QuestionID, AnswerID,UserSolutionText, AttemptDate)
    VALUES (p_UserID, p_AssessmentID, p_QuestionID, p_AnswerID,p_UserSolution, p_AttemptDate);
    COMMIT;
END AddUserSolution;

PROCEDURE getUserSolutionByAssessment(p_AssessmentID IN UserSolution.AssessmentID%TYPE ,
p_UserID IN UserSolution.UserID%TYPE)
IS
   p_Records SYS_REFCURSOR;
BEGIN
  OPEN p_Records FOR
SELECT * FROM UserSolution
where AssessmentID = p_AssessmentID AND UserID = p_UserID; 
dbms_sql.return_result(p_Records);

END getUserSolutionByAssessment;


PROCEDURE CalculateUserScore(
    p_AssessmentID IN UserSolution.AssessmentID%TYPE,
    p_UserID IN UserSolution.UserID%TYPE,
    totalMarks OUT NUMBER
)
AS
    v_totalMarks NUMBER := 0;
BEGIN
    totalMarks := NULL; 
    
    SELECT COUNT(*) INTO totalMarks
    FROM UserSolution us
    WHERE us.UserID = p_UserID
    AND us.AssessmentID = p_AssessmentID;

    IF totalMarks = 0 THEN
        totalMarks := NULL; 
    ELSE
        FOR solution IN (
            SELECT us.QuestionID, us.AnswerID, q.Marks, a.IsCorrect
            FROM UserSolution us
            INNER JOIN Answer a ON us.AnswerID = a.AnswerID
            INNER JOIN Questions q ON us.QuestionID = q.QuestionID
            WHERE us.UserID = p_UserID
            AND us.AssessmentID = p_AssessmentID
        )
        LOOP
            IF solution.IsCorrect = 'true' THEN
                v_totalMarks := v_totalMarks + solution.Marks;
            END IF;
        END LOOP;

        totalMarks := v_totalMarks;
    END IF;
    
    
    DECLARE
        existing_records NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO existing_records
        FROM Grades
        WHERE UserID = p_UserID
        AND AssessmantID = p_AssessmentID;
        
        IF existing_records = 0 THEN
            INSERT INTO Grades (STUDENTGRADE, USERID, ASSESSMANTID, NOTES)
            VALUES (totalMarks, p_UserID, p_AssessmentID, NULL);
        END IF;
    END;
END;

PROCEDURE UPDATE_UserSolution(
    p_SOLUTIONID IN UserSolution.SOLUTIONID%TYPE,
    p_UserID IN UserSolution.UserID%TYPE,
    p_AssessmentID IN UserSolution.AssessmentID%TYPE,
    p_QuestionID IN UserSolution.QuestionID%TYPE,
    p_AnswerID IN UserSolution.AnswerID %TYPE,
     p_UserSolutionText IN UserSolution.UserSolutionText%TYPE,
    p_AttemptDate IN UserSolution.AttemptDate%TYPE
    ) AS
    BEGIN
        UPDATE UserSolution SET
        UserID = p_UserID,
        AssessmentID = p_AssessmentID,
        QuestionID = p_QuestionID,
        AnswerID = p_AnswerID,
        UserSolutionText =  p_UserSolutionText,
        AttemptDate = p_AttemptDate
        WHERE SOLUTIONID = p_SOLUTIONID;
        COMMIT;
    END UPDATE_UserSolution;

    PROCEDURE DELETE_UserSolution(UserSolution_ID IN UserSolution.SOLUTIONID%TYPE) AS
    BEGIN
        DELETE FROM UserSolution 
        WHERE SOLUTIONID = UserSolution_ID;
        COMMIT;
    END DELETE_UserSolution;


END UserSolutions_Package ;

/
--------------------------------------------------------
--  DDL for Package Body USER_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USER_PACKAGE" AS
    PROCEDURE GET_ALL_USERS AS
        CUR_ALL SYS_REFCURSOR;
    BEGIN
        OPEN CUR_ALL FOR 
        SELECT * FROM USERS;
        DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_ALL_USERS;
    
    PROCEDURE GET_ALL_STUDENTS AS
      CUR_ALL SYS_REFCURSOR;
    BEGIN
        OPEN CUR_ALL FOR 
        SELECT u.firstname, u.lastname, u.userid, l.username FROM USERS u
        JOIN LOGIN l
        ON u.USERID = l.USERID
        WHERE l.ROLEID = 3;
        DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_ALL_STUDENTS;
    PROCEDURE GET_ALL_INSTRUCTORS AS
      CUR_ALL SYS_REFCURSOR;
    BEGIN
        OPEN CUR_ALL FOR 
        SELECT u.firstname, u.lastname, u.userid, l.username FROM USERS u
        JOIN LOGIN l
        ON u.USERID = l.USERID
        WHERE l.ROLEID = 2  ;
        DBMS_SQL.RETURN_RESULT(CUR_ALL);
    END GET_ALL_INSTRUCTORS;
    PROCEDURE GET_USER_BY_ID (ID IN NUMBER) AS
        CUR_USER SYS_REFCURSOR; 
    BEGIN
        OPEN CUR_USER FOR
        SELECT * FROM USERS
        WHERE USERID = ID ;
        DBMS_SQL.RETURN_RESULT(CUR_USER);
    END GET_USER_BY_ID;

    PROCEDURE CREATE_USER(
    FIRSTNAME IN USERS.FIRSTNAME%TYPE,
    LASTNAME IN USERS.LASTNAME%TYPE,
    DATEOFBIRTH IN USERS.DATEOFBIRTH%TYPE,
    IMAGEPATH IN USERS.IMAGEPATH%TYPE,
    ADDRESS IN USERS.ADDRESS%TYPE,
    PHONENUMBER IN USERS.PHONENUMBER%TYPE,
    REGISTRATIONDATE IN USERS.REGISTRATIONDATE%TYPE,
    ISACTIVE IN USERS.ISACTIVE%TYPE,
    CREATED_USERID OUT USERS.USERID%TYPE
) AS
BEGIN
    INSERT INTO USERS (FIRSTNAME, LASTNAME, DATEOFBIRTH, IMAGEPATH, ADDRESS, PHONENUMBER, REGISTRATIONDATE, ISACTIVE)
    VALUES (FIRSTNAME, LASTNAME, DATEOFBIRTH, IMAGEPATH, ADDRESS, PHONENUMBER, REGISTRATIONDATE, ISACTIVE)
    RETURNING USERID INTO CREATED_USERID;
 
    COMMIT;
END CREATE_USER;

    PROCEDURE UPDATE_USER(
        USER_ID IN USERS.USERID%TYPE,
        FIRST_NAME IN USERS.FIRSTNAME%TYPE,
        LAST_NAME IN USERS.LASTNAME%TYPE,
        DATE_OF_BIRTH IN USERS.DATEOFBIRTH%TYPE,
        IMAGE_PATH IN USERS.IMAGEPATH%TYPE,
        ADDRESS_ IN USERS.ADDRESS%TYPE,
        PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,
        REGISTRATION_DATE IN USERS.REGISTRATIONDATE%TYPE,
        IS_ACTIVE IN USERS.ISACTIVE%TYPE
    ) AS
    BEGIN
        UPDATE USERS SET
        FIRSTNAME = FIRST_NAME,
        LASTNAME = LAST_NAME,
        DATEOFBIRTH = DATE_OF_BIRTH,
        IMAGEPATH = IMAGE_PATH,
        ADDRESS = ADDRESS_,
        PHONENUMBER = PHONE_NUMBER,
        REGISTRATIONDATE = REGISTRATION_DATE,
        ISACTIVE = IS_ACTIVE
        WHERE USERID = USER_ID;
        COMMIT;
    END UPDATE_USER;
    
PROCEDURE UPDATE_ISACTIVE_USER(
        USER_ID IN USERS.USERID%TYPE,
        IS_ACTIVE IN USERS.ISACTIVE%TYPE
    )
    AS
    BEGIN
    UPDATE USERS SET
        ISACTIVE = IS_ACTIVE
        WHERE USERID = USER_ID;
        COMMIT;
    END UPDATE_ISACTIVE_USER;

    PROCEDURE UPDATE_USER_IMAGE(
        USER_ID IN USERS.USERID%TYPE,
        NEW_IMG IN USERS.IMAGEPATH%TYPE
    )
    AS
    BEGIN
    UPDATE USERS SET
        IMAGEPATH = NEW_IMG
        WHERE USERID = USER_ID;
        COMMIT;
    END UPDATE_USER_IMAGE;


    PROCEDURE UPDATE_USER_PHONE(
        USER_ID IN USERS.USERID%TYPE,
        NEW_PHONE IN USERS.PHONENUMBER%TYPE
    )
     AS
    BEGIN
    UPDATE USERS SET
        PHONENUMBER = NEW_PHONE
        WHERE USERID = USER_ID;
        COMMIT;
    END UPDATE_USER_PHONE;
    PROCEDURE DELETE_USER(USER_ID IN USERS.USERID%TYPE) AS
    BEGIN
        DELETE FROM USERS 
        WHERE USERID = USER_ID;
        COMMIT;
    END DELETE_USER;
PROCEDURE GET_STUDENTS_WITH_CV
AS
  CUR_STUDENTS  SYS_REFCURSOR;
BEGIN
    OPEN CUR_STUDENTS FOR 
    SELECT u.USERID, u.FIRSTNAME, u.LASTNAME, u.IMAGEPATH
    FROM USERS u
    JOIN LOGIN l ON u.USERID = l.USERID
    WHERE l.ROLEID = 3
      AND u.USERID IN (SELECT USERID FROM CVS);

    DBMS_SQL.RETURN_RESULT(CUR_STUDENTS);
END GET_STUDENTS_WITH_CV;


END USER_PACKAGE;

/
--------------------------------------------------------
--  Constraints for Table MATERIAL
--------------------------------------------------------

  ALTER TABLE "MATERIAL" MODIFY ("MATERIALID" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL" ADD PRIMARY KEY ("MATERIALID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLLS
--------------------------------------------------------

  ALTER TABLE "POLLS" MODIFY ("POLLID" NOT NULL ENABLE);
  ALTER TABLE "POLLS" ADD PRIMARY KEY ("POLLID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLE
--------------------------------------------------------

  ALTER TABLE "ROLE" MODIFY ("ROLEID" NOT NULL ENABLE);
  ALTER TABLE "ROLE" ADD PRIMARY KEY ("ROLEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table SECTION
--------------------------------------------------------

  ALTER TABLE "SECTION" MODIFY ("SECTIONID" NOT NULL ENABLE);
  ALTER TABLE "SECTION" ADD PRIMARY KEY ("SECTIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table COURSE
--------------------------------------------------------

  ALTER TABLE "COURSE" ADD PRIMARY KEY ("COURSEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CVS
--------------------------------------------------------

  ALTER TABLE "CVS" MODIFY ("CVID" NOT NULL ENABLE);
  ALTER TABLE "CVS" ADD PRIMARY KEY ("CVID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table STDSECTION
--------------------------------------------------------

  ALTER TABLE "STDSECTION" MODIFY ("STDSECTIONID" NOT NULL ENABLE);
  ALTER TABLE "STDSECTION" ADD PRIMARY KEY ("STDSECTIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table MESSAGES
--------------------------------------------------------

  ALTER TABLE "MESSAGES" MODIFY ("MESSAGEID" NOT NULL ENABLE);
  ALTER TABLE "MESSAGES" ADD PRIMARY KEY ("MESSAGEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "NOTIFICATIONS" MODIFY ("NOTIFICATIONID" NOT NULL ENABLE);
  ALTER TABLE "NOTIFICATIONS" ADD PRIMARY KEY ("NOTIFICATIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table QUESTIONS
--------------------------------------------------------

  ALTER TABLE "QUESTIONS" MODIFY ("QUESTIONID" NOT NULL ENABLE);
  ALTER TABLE "QUESTIONS" ADD PRIMARY KEY ("QUESTIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table SLIDER
--------------------------------------------------------

  ALTER TABLE "SLIDER" MODIFY ("SLIDERID" NOT NULL ENABLE);
  ALTER TABLE "SLIDER" MODIFY ("IMAGEPATH" NOT NULL ENABLE);
  ALTER TABLE "SLIDER" ADD PRIMARY KEY ("SLIDERID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERSOLUTION
--------------------------------------------------------

  ALTER TABLE "USERSOLUTION" MODIFY ("SOLUTIONID" NOT NULL ENABLE);
  ALTER TABLE "USERSOLUTION" ADD PRIMARY KEY ("SOLUTIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table FEEDBACK
--------------------------------------------------------

  ALTER TABLE "FEEDBACK" MODIFY ("FEEDBACKID" NOT NULL ENABLE);
  ALTER TABLE "FEEDBACK" ADD PRIMARY KEY ("FEEDBACKID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ASSESSMENTS
--------------------------------------------------------

  ALTER TABLE "ASSESSMENTS" MODIFY ("ASSESSMENTID" NOT NULL ENABLE);
  ALTER TABLE "ASSESSMENTS" ADD PRIMARY KEY ("ASSESSMENTID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table BATCHES
--------------------------------------------------------

  ALTER TABLE "BATCHES" MODIFY ("BATCHESID" NOT NULL ENABLE);
  ALTER TABLE "BATCHES" ADD PRIMARY KEY ("BATCHESID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROGRAM
--------------------------------------------------------

  ALTER TABLE "PROGRAM" MODIFY ("PROGRAMID" NOT NULL ENABLE);
  ALTER TABLE "PROGRAM" ADD PRIMARY KEY ("PROGRAMID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table GRADES
--------------------------------------------------------

  ALTER TABLE "GRADES" MODIFY ("GRADEID" NOT NULL ENABLE);
  ALTER TABLE "GRADES" ADD PRIMARY KEY ("GRADEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLLRESPONSES
--------------------------------------------------------

  ALTER TABLE "POLLRESPONSES" MODIFY ("POLLRESPONSEID" NOT NULL ENABLE);
  ALTER TABLE "POLLRESPONSES" ADD PRIMARY KEY ("POLLRESPONSEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table REVIEWINSTRUCTOR
--------------------------------------------------------

  ALTER TABLE "REVIEWINSTRUCTOR" MODIFY ("REVIEWID" NOT NULL ENABLE);
  ALTER TABLE "REVIEWINSTRUCTOR" ADD PRIMARY KEY ("REVIEWID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" MODIFY ("TESTIMONIALID" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONIAL" ADD PRIMARY KEY ("TESTIMONIALID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CONTACT
--------------------------------------------------------

  ALTER TABLE "CONTACT" MODIFY ("CONTACTID" NOT NULL ENABLE);
  ALTER TABLE "CONTACT" ADD PRIMARY KEY ("CONTACTID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ABOUTUS
--------------------------------------------------------

  ALTER TABLE "ABOUTUS" MODIFY ("ABOUTUSID" NOT NULL ENABLE);
  ALTER TABLE "ABOUTUS" ADD PRIMARY KEY ("ABOUTUSID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CERTIFICATES
--------------------------------------------------------

  ALTER TABLE "CERTIFICATES" MODIFY ("CERTIFICATEID" NOT NULL ENABLE);
  ALTER TABLE "CERTIFICATES" ADD PRIMARY KEY ("CERTIFICATEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "LOGIN" MODIFY ("LOGINID" NOT NULL ENABLE);
  ALTER TABLE "LOGIN" ADD PRIMARY KEY ("LOGINID")
  USING INDEX  ENABLE;
  ALTER TABLE "LOGIN" ADD UNIQUE ("USERNAME")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ATTENDANCE
--------------------------------------------------------

  ALTER TABLE "ATTENDANCE" MODIFY ("ATTENDANCEID" NOT NULL ENABLE);
  ALTER TABLE "ATTENDANCE" ADD PRIMARY KEY ("ATTENDANCEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ANSWER
--------------------------------------------------------

  ALTER TABLE "ANSWER" MODIFY ("ANSWERID" NOT NULL ENABLE);
  ALTER TABLE "ANSWER" ADD PRIMARY KEY ("ANSWERID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLLOPTIONS
--------------------------------------------------------

  ALTER TABLE "POLLOPTIONS" MODIFY ("OPTIONID" NOT NULL ENABLE);
  ALTER TABLE "POLLOPTIONS" ADD PRIMARY KEY ("OPTIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "USERS" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "USERS" ADD PRIMARY KEY ("USERID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ANSWER
--------------------------------------------------------

  ALTER TABLE "ANSWER" ADD CONSTRAINT "FK_QUESTION" FOREIGN KEY ("QUESTIONID")
	  REFERENCES "QUESTIONS" ("QUESTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ASSESSMENTS
--------------------------------------------------------

  ALTER TABLE "ASSESSMENTS" ADD CONSTRAINT "FK_SECTION" FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ATTENDANCE
--------------------------------------------------------

  ALTER TABLE "ATTENDANCE" ADD CONSTRAINT "SYS_C008873" FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ATTENDANCE" ADD CONSTRAINT "SYS_C008874" FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BATCHES
--------------------------------------------------------

  ALTER TABLE "BATCHES" ADD FOREIGN KEY ("PROGRAMID")
	  REFERENCES "PROGRAM" ("PROGRAMID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CERTIFICATES
--------------------------------------------------------

  ALTER TABLE "CERTIFICATES" ADD CONSTRAINT "SYS_C008877" FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CERTIFICATES" ADD CONSTRAINT "SYS_C008878" FOREIGN KEY ("COURSEID")
	  REFERENCES "COURSE" ("COURSEID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COURSE
--------------------------------------------------------

  ALTER TABLE "COURSE" ADD FOREIGN KEY ("PROGRAMID")
	  REFERENCES "PROGRAM" ("PROGRAMID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CVS
--------------------------------------------------------

  ALTER TABLE "CVS" ADD CONSTRAINT "SYS_C008881" FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FEEDBACK
--------------------------------------------------------

  ALTER TABLE "FEEDBACK" ADD FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GRADES
--------------------------------------------------------

  ALTER TABLE "GRADES" ADD FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "GRADES" ADD FOREIGN KEY ("ASSESSMANTID")
	  REFERENCES "ASSESSMENTS" ("ASSESSMENTID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "LOGIN" ADD FOREIGN KEY ("ROLEID")
	  REFERENCES "ROLE" ("ROLEID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "LOGIN" ADD FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MATERIAL
--------------------------------------------------------

  ALTER TABLE "MATERIAL" ADD FOREIGN KEY ("COURSEID")
	  REFERENCES "COURSE" ("COURSEID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MESSAGES
--------------------------------------------------------

  ALTER TABLE "MESSAGES" ADD CONSTRAINT "SYS_C008889" FOREIGN KEY ("SENDERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "MESSAGES" ADD CONSTRAINT "SYS_C008890" FOREIGN KEY ("RECEIVERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "SYS_C008893" FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table POLLOPTIONS
--------------------------------------------------------

  ALTER TABLE "POLLOPTIONS" ADD CONSTRAINT "FK_POLL" FOREIGN KEY ("POLLID")
	  REFERENCES "POLLS" ("POLLID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table POLLRESPONSES
--------------------------------------------------------

  ALTER TABLE "POLLRESPONSES" ADD CONSTRAINT "FK_OPTIONRESPONSE" FOREIGN KEY ("OPTIONID")
	  REFERENCES "POLLOPTIONS" ("OPTIONID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "POLLRESPONSES" ADD CONSTRAINT "FK_POLLRESPONSE" FOREIGN KEY ("POLLID")
	  REFERENCES "POLLS" ("POLLID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "POLLRESPONSES" ADD CONSTRAINT "FK_USERPOLLRESPONSE" FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table POLLS
--------------------------------------------------------

  ALTER TABLE "POLLS" ADD CONSTRAINT "F_SECTION" FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table QUESTIONS
--------------------------------------------------------

  ALTER TABLE "QUESTIONS" ADD CONSTRAINT "SYS_C008905" FOREIGN KEY ("ASSESSMENTID")
	  REFERENCES "ASSESSMENTS" ("ASSESSMENTID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REVIEWINSTRUCTOR
--------------------------------------------------------

  ALTER TABLE "REVIEWINSTRUCTOR" ADD FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SECTION
--------------------------------------------------------

  ALTER TABLE "SECTION" ADD FOREIGN KEY ("COURSEID")
	  REFERENCES "COURSE" ("COURSEID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "SECTION" ADD FOREIGN KEY ("INSTRUCTORID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STDSECTION
--------------------------------------------------------

  ALTER TABLE "STDSECTION" ADD FOREIGN KEY ("SECTIONID")
	  REFERENCES "SECTION" ("SECTIONID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "STDSECTION" ADD FOREIGN KEY ("STUDENTID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" ADD FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USERSOLUTION
--------------------------------------------------------

  ALTER TABLE "USERSOLUTION" ADD CONSTRAINT "FK2_ASSESSMENT" FOREIGN KEY ("ASSESSMENTID")
	  REFERENCES "ASSESSMENTS" ("ASSESSMENTID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USERSOLUTION" ADD CONSTRAINT "SYS_C008911" FOREIGN KEY ("USERID")
	  REFERENCES "USERS" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USERSOLUTION" ADD CONSTRAINT "SYS_C008912" FOREIGN KEY ("QUESTIONID")
	  REFERENCES "QUESTIONS" ("QUESTIONID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USERSOLUTION" ADD CONSTRAINT "SYS_C008913" FOREIGN KEY ("ANSWERID")
	  REFERENCES "ANSWER" ("ANSWERID") ON DELETE CASCADE ENABLE;
